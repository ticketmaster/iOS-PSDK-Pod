// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PresenceSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AuthenticationServices
import Contacts
import ContactsUI
import Darwin
import DeveloperToolsSupport
import Foundation
import LocalAuthentication
import MapKit
import MessageUI
import PassKit
@_exported import PresenceSDK
import SafariServices
import Security
import Swift
import SwiftUI
import SystemConfiguration
import TicketmasterFoundation
import TicketmasterSecureEntry
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension PresenceSDK.PSDK {
  @available(*, deprecated, message: "Renamed to start(presenceView: PresenceView, ...)")
  @objc final public func start(presenceSDKView: PresenceSDK.PresenceSDKView?, loginDelegate: (any PresenceSDK.PresenceLoginDelegate)? = nil, orderDelegate: (any PresenceSDK.PresenceOrderDelegate)? = nil)
  final public func start(presenceView: PresenceSDK.PresenceView?, loginDelegate: (any PresenceSDK.PresenceLoginDelegate)? = nil, orderDelegate: (any PresenceSDK.PresenceOrderDelegate)? = nil, moduleDelegate: (any PresenceSDK.PresenceModuleDelegate)? = nil)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PSDK : ObjectiveC.NSObject {
  public static let shared: PresenceSDK.PSDK
  weak final public var loginDelegate: (any PresenceSDK.PresenceLoginDelegate)?
  weak final public var orderDelegate: (any PresenceSDK.PresenceOrderDelegate)?
  weak final public var moduleDelegate: (any PresenceSDK.PresenceModuleDelegate)?
  final public var eventsView: PresenceSDK.PresenceView? {
    get
  }
  final public let oauthProvider: PresenceSDK.PresenceOAuthProvider
  final public var hostLoginQueryParams: [Swift.String : Swift.String]
  final public var archticsLoginQueryParams: [Swift.String : Swift.String]
  final public var sportXRLoginQueryParams: [Swift.String : Swift.String]
  public typealias ConfigSuccessHandler = () -> Swift.Void
  public typealias ConfigFailureHandler = (_ error: (any Swift.Error)?) -> Swift.Void
  public typealias AccessTokenSuccessCompletionHandler = (_ token: Swift.String) -> Swift.Void
  public typealias AccessTokenFailureCompletionHandler = (_ error: (any Swift.Error)?, _ canceled: Swift.Bool) -> Swift.Void
  @objc deinit
}
extension PresenceSDK.PSDK {
  @objc final public func jumpToOrderOrEvent(id: Swift.String)
  @objc final public func jumpToOrderOrEvent(id: Swift.String, type: PresenceSDK.PSDK.IdType)
  @objc final public func jumpToOrderOrEvent(id: Swift.String, type: PresenceSDK.PSDK.IdType, action: PresenceSDK.PSDK.ActionType)
  final public func jumpToOrderOrEvent(id: Swift.String, type: PresenceSDK.PSDK.IdType = .any, action: PresenceSDK.PSDK.ActionType? = nil)
  @available(*, deprecated, message: "Use jumpToOrderOrEvent(id:type:action:) and set orderDelegate directly on PSDK.shared")
  @objc final public func jumpToOrderOrEvent(id: Swift.String, type: PresenceSDK.PSDK.IdType, action: PresenceSDK.PSDK.ActionType, orderDelegate: (any PresenceSDK.PresenceOrderDelegate)?)
}
@inlinable internal func rotateLeft(_ value: Swift.UInt8, by: Swift.UInt8) -> Swift.UInt8 {
  ((value << by) & 0xff) | (value >> (8 - by))
}
@inlinable internal func rotateLeft(_ value: Swift.UInt16, by: Swift.UInt16) -> Swift.UInt16 {
  ((value << by) & 0xffff) | (value >> (16 - by))
}
@inlinable internal func rotateLeft(_ value: Swift.UInt32, by: Swift.UInt32) -> Swift.UInt32 {
  ((value << by) & 0xffffffff) | (value >> (32 - by))
}
@inlinable internal func rotateLeft(_ value: Swift.UInt64, by: Swift.UInt64) -> Swift.UInt64 {
  (value << by) | (value >> (64 - by))
}
@inlinable internal func rotateRight(_ value: Swift.UInt16, by: Swift.UInt16) -> Swift.UInt16 {
  (value >> by) | (value << (16 - by))
}
@inlinable internal func rotateRight(_ value: Swift.UInt32, by: Swift.UInt32) -> Swift.UInt32 {
  (value >> by) | (value << (32 - by))
}
@inlinable internal func rotateRight(_ value: Swift.UInt64, by: Swift.UInt64) -> Swift.UInt64 {
  ((value >> by) | (value << (64 - by)))
}
@inlinable internal func reversed(_ uint8: Swift.UInt8) -> Swift.UInt8 {
  var v = uint8
  v = (v & 0xf0) >> 4 | (v & 0x0f) << 4
  v = (v & 0xcc) >> 2 | (v & 0x33) << 2
  v = (v & 0xaa) >> 1 | (v & 0x55) << 1
  return v
}
@inlinable internal func reversed(_ uint32: Swift.UInt32) -> Swift.UInt32 {
  var v = uint32
  v = ((v >> 1) & 0x55555555) | ((v & 0x55555555) << 1)
  v = ((v >> 2) & 0x33333333) | ((v & 0x33333333) << 2)
  v = ((v >> 4) & 0x0f0f0f0f) | ((v & 0x0f0f0f0f) << 4)
  v = ((v >> 8) & 0x00ff00ff) | ((v & 0x00ff00ff) << 8)
  v = ((v >> 16) & 0xffff) | ((v & 0xffff) << 16)
  return v
}
@inlinable internal func xor<T, V>(_ left: T, _ right: V) -> Swift.ArraySlice<Swift.UInt8> where T : Swift.RandomAccessCollection, V : Swift.RandomAccessCollection, T.Element == Swift.UInt8, T.Index == Swift.Int, V.Element == Swift.UInt8, V.Index == Swift.Int {
  return xor(left, right).slice
}
@inlinable internal func xor<T, V>(_ left: T, _ right: V) -> Swift.Array<Swift.UInt8> where T : Swift.RandomAccessCollection, V : Swift.RandomAccessCollection, T.Element == Swift.UInt8, T.Index == Swift.Int, V.Element == Swift.UInt8, V.Index == Swift.Int {
  let length = Swift.min(left.count, right.count)

  let buf = UnsafeMutablePointer<UInt8>.allocate(capacity: length)
  buf.initialize(repeating: 0, count: length)
  defer {
    buf.deinitialize(count: length)
    buf.deallocate()
  }

  // xor
  for i in 0..<length {
    buf[i] = left[left.startIndex.advanced(by: i)] ^ right[right.startIndex.advanced(by: i)]
  }

  return Array(UnsafeBufferPointer(start: buf, count: length))
}
@inline(__always) @inlinable internal func bitPadding(to data: inout Swift.Array<Swift.UInt8>, blockSize: Swift.Int, allowance: Swift.Int = 0) {
  let msgLength = data.count
  // Step 1. Append Padding Bits
  // append one bit (UInt8 with one bit) to message
  data.append(0x80)

  // Step 2. append "0" bit until message length in bits â‰¡ 448 (mod 512)
  let max = blockSize - allowance // 448, 986
  if msgLength % blockSize < max { // 448
    data += Array<UInt8>(repeating: 0, count: max - 1 - (msgLength % blockSize))
  } else {
    data += Array<UInt8>(repeating: 0, count: blockSize + max - 1 - (msgLength % blockSize))
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class PresenceModuleHeaderView : UIKit.UIView {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak final public var colorView: UIKit.UIView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak final public var imageView: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak final public var mapView: MapKit.MKMapView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak final public var topLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak final public var centerLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak final public var bottomLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak final public var barcodeBackgroundView: UIKit.UIView!
  @_Concurrency.MainActor(unsafe) public static func build() -> PresenceSDK.PresenceModuleHeaderView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PresenceSDK.PresenceModuleHeaderView {
  @_Concurrency.MainActor(unsafe) final public func configure(topLabelText: Swift.String? = nil, topLabelTextAlignment: UIKit.NSTextAlignment? = .left, centerLabelText: Swift.String? = nil, centerLabelTextAlignment: UIKit.NSTextAlignment? = .center, bottomLabelText: Swift.String? = nil, bottomLabelTextAlignment: UIKit.NSTextAlignment? = .right, gradientAlpha: CoreFoundation.CGFloat? = 0.0, backgroundImage: UIKit.UIImage)
  @_Concurrency.MainActor(unsafe) final public func configure(topLabelText: Swift.String? = nil, topLabelTextAlignment: UIKit.NSTextAlignment? = .left, centerLabelText: Swift.String? = nil, centerLabelTextAlignment: UIKit.NSTextAlignment? = .center, bottomLabelText: Swift.String? = nil, bottomLabelTextAlignment: UIKit.NSTextAlignment? = .right, gradientAlpha: CoreFoundation.CGFloat? = 0.0, backgroundColor: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) final public func configure(topLabelText: Swift.String? = nil, topLabelTextAlignment: UIKit.NSTextAlignment? = .left, centerLabelText: Swift.String? = nil, centerLabelTextAlignment: UIKit.NSTextAlignment? = .center, bottomLabelText: Swift.String? = nil, bottomLabelTextAlignment: UIKit.NSTextAlignment? = .right, gradientAlpha: CoreFoundation.CGFloat? = 0.0, mapCoordinateRegion: MapKit.MKCoordinateRegion, mapAnnotation: (any MapKit.MKAnnotation)? = nil)
  @_Concurrency.MainActor(unsafe) final public func configure(topLabelText: Swift.String? = nil, topLabelTextAlignment: UIKit.NSTextAlignment? = .left, centerLabelText: Swift.String? = nil, centerLabelTextAlignment: UIKit.NSTextAlignment? = .center, bottomLabelText: Swift.String? = nil, bottomLabelTextAlignment: UIKit.NSTextAlignment? = .right, gradientAlpha: CoreFoundation.CGFloat? = 0.0, backgroundImage: UIKit.UIImage? = nil, qrCodeValue: Swift.String)
  @_Concurrency.MainActor(unsafe) final public func configure(topLabelText: Swift.String? = nil, topLabelTextAlignment: UIKit.NSTextAlignment? = .left, centerLabelText: Swift.String? = nil, centerLabelTextAlignment: UIKit.NSTextAlignment? = .center, bottomLabelText: Swift.String? = nil, bottomLabelTextAlignment: UIKit.NSTextAlignment? = .right, gradientAlpha: CoreFoundation.CGFloat? = 0.0, backgroundImage: UIKit.UIImage? = nil, barcode2DValue: Swift.String)
  @_Concurrency.MainActor(unsafe) final public func configure(topLabelText: Swift.String? = nil, topLabelTextAlignment: UIKit.NSTextAlignment? = .left, centerLabelText: Swift.String? = nil, centerLabelTextAlignment: UIKit.NSTextAlignment? = .center, bottomLabelText: Swift.String? = nil, bottomLabelTextAlignment: UIKit.NSTextAlignment? = .right, gradientAlpha: CoreFoundation.CGFloat? = 0.0, avContentURL: Foundation.URL, disableLoopingContent: Swift.Bool = false, disableAVAudio: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) final public func playAVContent()
  @_Concurrency.MainActor(unsafe) final public func pauseAVContent()
}
extension PresenceSDK.PSDK {
  @objc final public func setTicketsActionButtonText(title: Swift.String?)
}
extension PresenceSDK.PSDK {
  @objc final public func getMemberInfo(backendName: PresenceSDK.PSDK.BackendName, completion: @escaping (_ member: (any PresenceSDK.PresenceMember)?, _ error: (any Swift.Error)?) -> Swift.Void)
}
extension Swift.Collection where Self.Element == Swift.UInt8, Self.Index == Swift.Int {
  @inlinable internal func toUInt32Array() -> Swift.Array<Swift.UInt32> {
    guard !isEmpty else {
      return []
    }

    let c = strideCount(from: startIndex, to: endIndex, by: 4)
    return Array<UInt32>(unsafeUninitializedCapacity: c) { buf, count in
      var counter = 0
      for idx in stride(from: startIndex, to: endIndex, by: 4) {
        let val = UInt32(bytes: self, fromIndex: idx).bigEndian
        buf[counter] = val
        counter += 1
      }
      count = counter
      assert(counter == c)
    }
  }
  @inlinable internal func toUInt64Array() -> Swift.Array<Swift.UInt64> {
    guard !isEmpty else {
      return []
    }

    let c = strideCount(from: startIndex, to: endIndex, by: 8)
    return Array<UInt64>(unsafeUninitializedCapacity: c) { buf, count in
      var counter = 0
      for idx in stride(from: startIndex, to: endIndex, by: 8) {
        let val = UInt64(bytes: self, fromIndex: idx).bigEndian
        buf[counter] = val
        counter += 1
      }
      count = counter
      assert(counter == c)
    }
  }
}
@usableFromInline
internal func strideCount(from: Swift.Int, to: Swift.Int, by: Swift.Int) -> Swift.Int
extension PresenceSDK.PSDK {
  public static let errorDomain: Swift.String
  public static let errorDomainMFA: Swift.String
  public static let errorDomainTMX: Swift.String
  public static let configurationNotSetError: Foundation.NSError
  public static let configurationNotMatchedError: Foundation.NSError
  public static let configurationServiceNotSetError: Foundation.NSError
  public static let configurationInvalidForOperationError: Foundation.NSError
  public static let featureDisabledByApigeeError: Foundation.NSError
  public static let emptyResponseError: Foundation.NSError
  public static let unexpectedReponseError: Foundation.NSError
  public static let userNotLoggedInError: Foundation.NSError
  public static let userCanceledLoginError: Foundation.NSError
  public static let loginWindowAlreadyPresentError: Foundation.NSError
  public static let loginWindowMissingError: Foundation.NSError
  public static let missingOAuthTokensError: Foundation.NSError
  public static let delegateNotImplementedError: Foundation.NSError
}
public protocol PresenceModuleDelegate : AnyObject {
  func addCustomModules(eventOrders: PresenceSDK.PresenceEventOrders, completion: @escaping (_ customModuleArray: [PresenceSDK.PSDKTicketsModule]?) -> Swift.Void)
  func handleModuleActionButton(moduleIdentifier: Swift.String, buttonTitle: Swift.String, callbackValue: Swift.String, eventOrders: PresenceSDK.PresenceEventOrders, completion: @escaping (_ openWebpageSettings: PresenceSDK.PSDKTicketsModule.WebpageSettings?) -> Swift.Void)
  func userDidPressActionButton(moduleIdentifier: Swift.String, buttonTitle: Swift.String, callbackValue: Swift.String, eventOrders: PresenceSDK.PresenceEventOrders)
}
extension PresenceSDK.PSDKTicketsModule {
  public enum PrebuiltModuleName : Swift.String, Swift.CaseIterable {
    case venueDirectionsViaAppleMaps
    case venueConcessions
    case accountManagerSeatUpgrades
    case accountManagerMoreTicketActions
    public init?(rawValue: Swift.String)
    public typealias AllCases = [PresenceSDK.PSDKTicketsModule.PrebuiltModuleName]
    public typealias RawValue = Swift.String
    public static var allCases: [PresenceSDK.PSDKTicketsModule.PrebuiltModuleName] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum PrebuiltButtonCallbackName : Swift.String, Swift.CaseIterable {
    case moreTicketActions
    case seatUpgrades
    case getDirections
    case rideShare
    case order
    case wallet
    public init?(rawValue: Swift.String)
    public typealias AllCases = [PresenceSDK.PSDKTicketsModule.PrebuiltButtonCallbackName]
    public typealias RawValue = Swift.String
    public static var allCases: [PresenceSDK.PSDKTicketsModule.PrebuiltButtonCallbackName] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public struct HeaderOverride {
    public let topLabelText: Swift.String?
    public let topLabelTextAlignment: UIKit.NSTextAlignment?
    public let centerLabelText: Swift.String?
    public let centerLabelTextAlignment: UIKit.NSTextAlignment?
    public let bottomLabelText: Swift.String?
    public let bottomLabelTextAlignment: UIKit.NSTextAlignment?
    public let gradientAlpha: CoreFoundation.CGFloat?
    public let backgroundImage: UIKit.UIImage?
    public init(topLabelText: Swift.String? = nil, topLabelTextAlignment: UIKit.NSTextAlignment? = nil, centerLabelText: Swift.String? = nil, centerLabelTextAlignment: UIKit.NSTextAlignment? = nil, bottomLabelText: Swift.String? = nil, bottomLabelTextAlignment: UIKit.NSTextAlignment? = nil, gradientAlpha: CoreFoundation.CGFloat? = nil, backgroundImage: UIKit.UIImage? = nil)
  }
  public static func accountManagerSeatUpgrades(eventOrders: PresenceSDK.PresenceEventOrders, headerOverride: PresenceSDK.PSDKTicketsModule.HeaderOverride? = nil) -> PresenceSDK.PSDKTicketsModule?
  public static func accountManagerMoreTicketActions(eventOrders: PresenceSDK.PresenceEventOrders) -> PresenceSDK.PSDKTicketsModule?
  public static func venueDirectionsViaAppleMaps(eventOrders: PresenceSDK.PresenceEventOrders) -> PresenceSDK.PSDKTicketsModule?
  public static func venueConcessions(eventOrders: PresenceSDK.PresenceEventOrders, headerOverride: PresenceSDK.PSDKTicketsModule.HeaderOverride? = nil, showWalletButton: Swift.Bool) -> PresenceSDK.PSDKTicketsModule?
}
extension Swift.FixedWidthInteger {
  @inlinable internal func bytes(totalBytes: Swift.Int = MemoryLayout<Self>.size) -> Swift.Array<Swift.UInt8> {
    arrayOfBytes(value: self.littleEndian, length: totalBytes)
    // TODO: adjust bytes order
    // var value = self.littleEndian
    // return withUnsafeBytes(of: &value, Array.init).reversed()
  }
}
extension PresenceSDK.PSDK {
  @objc final public func login(to backendName: PresenceSDK.PSDK.BackendName, completion: ((_ success: Swift.Bool) -> Swift.Void)? = nil)
}
extension PresenceSDK.PSDK {
  @objc final public func resetPasswordForHost(success: @escaping PresenceSDK.PSDK.AccessTokenSuccessCompletionHandler, failure: @escaping PresenceSDK.PSDK.AccessTokenFailureCompletionHandler, token: Swift.String? = nil)
  @objc final public var loginButton: PresenceSDK.PSDK.LoginButtons {
    @objc get
    @objc set
  }
}
extension PresenceSDK.PSDK {
  @objc final public func getAccessToken(backendName: PresenceSDK.PSDK.BackendName, success: @escaping PresenceSDK.PSDK.AccessTokenSuccessCompletionHandler, failure: @escaping PresenceSDK.PSDK.AccessTokenFailureCompletionHandler)
  @objc final public func getAccessToken(backendName: PresenceSDK.PSDK.BackendName, presentLoginUI: Swift.Bool = true, success: @escaping PresenceSDK.PSDK.AccessTokenSuccessCompletionHandler, failure: @escaping PresenceSDK.PSDK.AccessTokenFailureCompletionHandler)
}
extension PresenceSDK.PSDK {
  @available(*, deprecated, message: "Use logout(completion:) instead for proper OAuth2 logout handling")
  @objc final public func logOut()
  @objc final public func logOut(forceLogout: Swift.Bool = false, completion: @escaping (_ hostSuccess: Swift.Bool, _ hostError: (any Swift.Error)?, _ teamSuccess: Swift.Bool, _ teamError: (any Swift.Error)?, _ sportXRSuccess: Swift.Bool, _ sportXRError: (any Swift.Error)?) -> Swift.Void = { _, _, _, _, _, _ in })
  @objc final public func logout(backendName: PresenceSDK.PSDK.BackendName, forceLogout: Swift.Bool = false, success: @escaping () -> Swift.Void = { }, failure: @escaping (_ error: any Swift.Error) -> Swift.Void = { _ in })
  @objc final public func logOutHost(forceLogout: Swift.Bool = false, success: @escaping () -> Swift.Void = { }, failure: @escaping (_ error: any Swift.Error) -> Swift.Void = { _ in })
  @objc final public func logOutTeam(forceLogout: Swift.Bool = false, success: @escaping () -> Swift.Void = { }, failure: @escaping (_ error: any Swift.Error) -> Swift.Void = { _ in })
  @objc final public func logOutSportXR(forceLogout: Swift.Bool = false, success: @escaping () -> Swift.Void = { }, failure: @escaping (_ error: any Swift.Error) -> Swift.Void = { _ in })
}
extension PresenceSDK.PSDK {
  @objc final public func isLoggedIn() -> Swift.Bool
  @objc final public func isLoggedIntoHost() -> Swift.Bool
  @objc final public func isLoggedIntoTeam() -> Swift.Bool
  @objc final public func isLoggedIntoSportXR() -> Swift.Bool
  @objc final public func hasUserSignedIn() -> Swift.Bool
  @objc final public func hasUserSignedInHost() -> Swift.Bool
  @objc final public func hasUserSignedInTeam() -> Swift.Bool
  @objc final public func hasUserSignedInSportXR() -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers public class PresenceOrder : ObjectiveC.NSObject, Swift.Codable, Swift.Comparable {
  final public let orderIdentifier: Swift.String
  final public let displayableOrderIdentifier: Swift.String
  final public let encodedOrderIdentifier: Swift.String?
  final public let tickets: [PresenceSDK.PresenceTicket]
  public static func < (lhs: PresenceSDK.PresenceOrder, rhs: PresenceSDK.PresenceOrder) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class PresenceEvent : ObjectiveC.NSObject, Swift.Codable {
  final public let identifier: Swift.String
  final public let uniqueIdentifier: Swift.String?
  final public let hostIdentifier: Swift.String?
  final public let discoveryIdentifier: Swift.String?
  final public let childEventIDs: [Swift.String]?
  final public let relatedIdentifiers: [Swift.String]?
  final public let name: Swift.String?
  final public let eventDescription: Swift.String?
  final public let imageInfo: PresenceSDK.PresenceImageInfo?
  final public let url: Foundation.URL?
  final public let code: Swift.String?
  final public let typeName: Swift.String?
  final public let status: Swift.String?
  final public let color: Swift.String?
  final public let dateInfo: PresenceSDK.PresenceDateInfo?
  final public let isPastEvent: Swift.Bool?
  final public let isHostEvent: Swift.Bool?
  final public let isSeriesMaster: Swift.Bool?
  final public let isSeriesChild: Swift.Bool?
  final public let isThirdPartyResale: Swift.Bool?
  final public let isStreaming: Swift.Bool?
  final public let isSportXREvent: Swift.Bool?
  final public let promoterBranding: PresenceSDK.PresencePromoterBranding?
  final public let healthCheck: PresenceSDK.PresenceHealthCheck?
  final public let venue: PresenceSDK.PresenceVenue?
  final public let attraction: PresenceSDK.PresenceAttraction?
  final public let hostOrderInfos: [PresenceSDK.PresenceOrderInfo]?
  final public let hostOrderIDs: [Swift.String]?
  final public let encodedHostOrderIDs: [Swift.String]?
  final public let orderStatus: Swift.String?
  final public let isF2FExchangeEnabled: Swift.Bool?
  final public let ticketManagement: PresenceSDK.PresenceTicketManagement?
  final public let isOrdersAPI: Swift.Bool?
  final public let useTmtt: Swift.Bool?
  final public let isRetEnabled: Swift.Bool?
  final public let isLarge: Swift.Bool?
  final public let changeStatus: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class PresenceVenue : ObjectiveC.NSObject, Swift.Codable {
  final public let identifier: Swift.String?
  final public let name: Swift.String?
  final public let timezone: Swift.String?
  final public let address: PresenceSDK.PresenceVenue.Address?
  final public let geolocation: PresenceSDK.PresenceVenue.Location?
  @objc @_hasMissingDesignatedInitializers public class Address : ObjectiveC.NSObject, Swift.Codable {
    final public let line1: Swift.String?
    final public let city: Swift.String?
    final public let region: Swift.String?
    final public let postalCode: Swift.String?
    final public let country: Swift.String?
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
  @objc @_hasMissingDesignatedInitializers public class Location : ObjectiveC.NSObject, Swift.Codable {
    final public let latitude: Swift.String?
    final public let longitude: Swift.String?
    public var coordinate: CoreLocation.CLLocationCoordinate2D? {
      get
    }
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class PresenceAttraction : ObjectiveC.NSObject, Swift.Codable {
  final public let identifier: Swift.String?
  final public let name: Swift.String?
  final public let type: Swift.String?
  final public let url: Foundation.URL?
  final public let locale: Swift.String?
  final public let test: Swift.Bool?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class PresenceOrderInfo : ObjectiveC.NSObject, Swift.Codable {
  final public let orderId: Swift.String?
  final public let displayOrderId: Swift.String?
  final public let legacyOrderId: Swift.String?
  final public let encodedOrderId: Swift.String?
  final public let orderStatus: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class PresenceDateInfo : ObjectiveC.NSObject, Swift.Codable {
  final public let isMultiDay: Swift.Bool
  final public let dateAtVenueString: Swift.String?
  final public let endDateAtVenueString: Swift.String?
  final public let dateTimeAtVenueString: Swift.String?
  final public let dateTimeUTCString: Swift.String?
  final public let dateTimeUTC: Foundation.Date?
  final public let timezone: Foundation.TimeZone?
  final public let hasDateOverride: Swift.Bool
  final public let dateOverrideText: Swift.String?
  final public let hasTimeOverride: Swift.Bool
  final public let timeOverrideText: Swift.String?
  final public let displayDateTimeText: Swift.String?
  final public let actualDisplayDateTimeText: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class PresenceImageInfo : ObjectiveC.NSObject, Swift.Codable {
  final public let identifier: Swift.String?
  final public let name: Swift.String?
  final public let url: Foundation.URL?
  final public let height: CoreFoundation.CGFloat?
  final public let width: CoreFoundation.CGFloat?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class PresencePromoterBranding : ObjectiveC.NSObject, Swift.Codable {
  final public let colorString: Swift.String
  final public let logo1xUrl: Foundation.URL?
  final public let logo2xUrl: Foundation.URL?
  final public let logo3xUrl: Foundation.URL?
  public func color() -> UIKit.UIColor?
  public func logoForScreenScale() -> Foundation.URL?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class PresenceHealthCheck : ObjectiveC.NSObject, Swift.Codable {
  final public let provider: Swift.String?
  final public let smallIcon: Foundation.URL?
  final public let largeIcon: Foundation.URL?
  final public let summary: Swift.String?
  final public let checkDescription: Swift.String?
  final public let learnMoreUrl: Foundation.URL?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class PresenceTicketManagement : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class PresenceEventOrders : ObjectiveC.NSObject, Swift.Codable {
  final public let event: PresenceSDK.PresenceEvent
  final public let orders: [PresenceSDK.PresenceOrder]?
  public var selectedOrder: PresenceSDK.PresenceOrder?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension PresenceSDK.PSDK {
  @objc public enum BackendName : Swift.Int, Swift.CustomStringConvertible {
    case host
    case accountManager
    case sportXR
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum LoginMethod : Swift.Int, Swift.CustomStringConvertible {
    case conventional
    case automatic
    case fingerprint
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum HostEnvironment : Swift.Int, Swift.CustomStringConvertible {
    case US = 0
    case UK
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum SDKEnvironment : Swift.Int, Swift.CustomStringConvertible {
    case Production = 0
    case Staging
    case PreProduction
    case Development
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum SDKTheme : Swift.Int, Swift.CustomStringConvertible {
    case Light
    case Dark
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum VenueConcessionsButtonType : Swift.Int, Swift.CustomStringConvertible {
    case order = 0
    case wallet
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum IdType : Swift.Int, Swift.CustomStringConvertible {
    case event
    case order
    case any
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum ActionType : Swift.Int, Swift.CustomStringConvertible {
    case posting
    case transfer
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum LoginButtons : Swift.Int, Swift.CustomStringConvertible {
    case forgotPassword
    case createAccount
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum PresencePage : Swift.Int, Swift.CustomStringConvertible {
    case none
    case myEvents
    case myTickets
    case myTicketDetail
    case module
    case viewBarcode
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_inheritsConvenienceInitializers @objc public class BrandingColors : ObjectiveC.NSObject {
    @objc public init(navBarColor: UIKit.UIColor, ticketColor: UIKit.UIColor, buttonColor: UIKit.UIColor)
    @objc public init(oneColor: UIKit.UIColor)
    @objc override dynamic public init()
    @objc deinit
  }
  @objc public enum IdentityTheme : Swift.Int, Swift.CustomStringConvertible {
    case ticketmaster
    case ticketmasterNew
    case livenation
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension Swift.Array {
  @inlinable internal init(reserveCapacity: Swift.Int) {
    self = Array<Element>()
    self.reserveCapacity(reserveCapacity)
  }
  @inlinable internal var slice: Swift.ArraySlice<Element> {
    get {
    self[self.startIndex ..< self.endIndex]
  }
  }
}
@objc @_hasMissingDesignatedInitializers public class PresenceTicket : ObjectiveC.NSObject, Swift.Codable {
  final public let identifier: Swift.String?
  final public let uniqueEventIdentifier: Swift.String?
  final public let eventIdentifier: Swift.String?
  final public let externalEventIdentifier: Swift.String?
  final public let eventName: Swift.String?
  final public let eventCode: Swift.String?
  final public let paramRef: Swift.String?
  final public let ticketType: Swift.String?
  final public let extendedTicketType: Swift.String?
  final public let ticketDescription: Swift.String?
  final public let productType: Swift.String?
  final public let isHostTicket: Swift.Bool?
  final public let isStreamingTicket: Swift.Bool?
  final public let isThirdPartyResale: Swift.Bool?
  final public let ticketSource: Swift.String?
  final public let ticketTextLines: [Swift.String]?
  final public let termsAndConditions: Swift.String?
  final public let hostBranding: PresenceSDK.PresenceHostBranding?
  final public let vipColor: PresenceSDK.PresenceColor?
  final public let vipText: Swift.String?
  final public let isMfaOnViewBarcodeEnabled: Swift.Bool?
  final public let entryGate: Swift.String?
  final public let sectionName: Swift.String?
  final public let rowName: Swift.String?
  final public let seatName: Swift.String?
  final public let seatType: Swift.String?
  final public let seatFrom: Swift.String?
  final public let seatThru: Swift.String?
  final public let deliveryInfo: PresenceSDK.PresenceDelivery?
  final public let deliveryServiceType: Swift.String?
  final public let barcodeRenderStatus: Swift.String?
  final public let ticketStatus: Swift.String?
  final public let transferAvailabilityStatus: Swift.String?
  final public let resaleAvailabilityStatus: Swift.String?
  final public let orderIdentifier: Swift.String?
  final public let displayOrderIdentifier: Swift.String?
  final public let encodedOrderIdentifier: Swift.String?
  final public let isOrdersApi: Swift.Bool?
  final public let orderStatus: Swift.String?
  final public let purchaseDate: Foundation.Date?
  final public let ticketFees: [PresenceSDK.PresenceTicketFee]?
  final public let originalTicketPrice: Swift.Double?
  final public let orderSource: Swift.String?
  final public let printStatus: Swift.String?
  final public let printEligibility: Swift.String?
  final public let eventCPRStatus: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class PresenceTicketFee : ObjectiveC.NSObject, Swift.Codable {
  final public let feeDescription: Swift.String?
  final public let type: Swift.String?
  final public let amount: Swift.Double?
  final public let currency: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class PresenceDelivery : ObjectiveC.NSObject, Swift.Codable {
  final public let status: Swift.String?
  final public let source: PresenceSDK.PresenceDelivery.DeliverySource?
  final public let deliveryDate: Foundation.Date?
  final public let segmentType: PresenceSDK.PresenceDelivery.DeliverySegmentType?
  final public let trackingNumber: Swift.String?
  final public let descriptionLine1: Swift.String?
  final public let descriptionLine2: Swift.String?
  final public let descriptionLine3: Swift.String?
  final public let displayMessage: Swift.String?
  final public let methods: [Swift.String]?
  public enum DeliverySource : Swift.Equatable, Swift.Codable {
    case flash
    case ups
    case willCall
    case mobileTransfer
    case unknown
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PresenceSDK.PresenceDelivery.DeliverySource, b: PresenceSDK.PresenceDelivery.DeliverySource) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum DeliverySegmentType : Swift.Equatable, Swift.Codable {
    case barcode
    case nfc
    case rotatingSymbology
    case nfcRotatingSymbology
    case unknown
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PresenceSDK.PresenceDelivery.DeliverySegmentType, b: PresenceSDK.PresenceDelivery.DeliverySegmentType) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class PresenceHostBranding : ObjectiveC.NSObject, Swift.Codable {
  final public let headerImageUrl: Foundation.URL?
  final public let sponsorImageUrl: Foundation.URL?
  final public let termsTitle: Swift.String?
  final public let labelColor: PresenceSDK.PresenceColor?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class PresenceColor : ObjectiveC.NSObject, Swift.Codable, Swift.LosslessStringConvertible {
  final public let color: UIKit.UIColor
  public init?(color: UIKit.UIColor?)
  required public init?(_ hexString: Swift.String)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension PresenceSDK.PSDK {
  final public var version: Swift.String {
    get
  }
  final public var secureEntryVersion: Swift.String {
    get
  }
  @objc final public func setConfig(consumerKey: Swift.String, hostEnvironment: PresenceSDK.PSDK.HostEnvironment = .US, sdkEnvironment: PresenceSDK.PSDK.SDKEnvironment = .Production, displayName: Swift.String? = nil, useNewAccountsManager: Swift.Bool = true, disableModernAccounts: Swift.Bool = false, quickLogin: Swift.Bool = true, autoLogin: Swift.Bool = true)
  @objc final public func setConfiguration(_ configuration: PresenceSDK.PSDK.Configuration)
  @objc final public func checkConfig(success: @escaping PresenceSDK.PSDK.ConfigSuccessHandler, failure: @escaping PresenceSDK.PSDK.ConfigFailureHandler)
  @objc final public func setBrandingColors(_ brandingColors: PresenceSDK.PSDK.BrandingColors)
  @objc final public func enableTMBrandingColorOverride()
  @objc final public func doNotBrandNavBar()
  @objc final public func setLogo(_ image: UIKit.UIImage?)
  @objc final public func setTheme(theme: PresenceSDK.PSDK.SDKTheme)
  @objc final public func setUserTracking(enabled: Swift.Bool)
}
extension PresenceSDK.PSDK {
  @objc public class Configuration : ObjectiveC.NSObject {
    final public let consumerKey: Swift.String
    final public let hostEnvironment: PresenceSDK.PSDK.HostEnvironment
    final public let sdkEnvironment: PresenceSDK.PSDK.SDKEnvironment
    final public let displayName: Swift.String?
    final public let useNewAccountsManager: Swift.Bool
    final public let disableModernAccounts: Swift.Bool
    final public let quickLogin: Swift.Bool
    final public let autoLogin: Swift.Bool
    @objc public init(consumerKey: Swift.String, hostEnvironment: PresenceSDK.PSDK.HostEnvironment = .US, sdkEnvironment: PresenceSDK.PSDK.SDKEnvironment = .Production, displayName: Swift.String? = nil, useNewAccountsManager: Swift.Bool = true, disableModernAccounts: Swift.Bool = false, quickLogin: Swift.Bool = true, autoLogin: Swift.Bool = true)
    @objc deinit
  }
}
@objc @_inheritsConvenienceInitializers final public class PresenceEventAnalytics : ObjectiveC.NSObject {
  @objc @_inheritsConvenienceInitializers @objcMembers final public class Action : ObjectiveC.NSObject {
    @objc public static let ACTION_MYTICKETSCREENSHOWED: Swift.String
    @objc public static let ACTION_MANAGETICKETSCREENSHOWED: Swift.String
    @objc public static let ACTION_ADDPAYMENTINFOSCREENSHOWED: Swift.String
    @objc public static let ACTION_MYTICKETBARCODESCREENSHOWED: Swift.String
    @objc public static let ACTION_TICKETDETAILSSCREENSHOWED: Swift.String
    @objc public static let ACTION_FINDNEWTICKETSPRESSED: Swift.String
    @objc public static let ACTION_MYTICKETBARCODESCREENSHOT: Swift.String
    @objc public static let ACTION_HEALTH_CHECK_MORE_INFO_CLICK: Swift.String
    @objc public static let ACTION_HEALTH_CHECK_LEARN_MORE_CLICK: Swift.String
    @objc public static let ACTION_HEALTH_CHECK_GOT_IT_CLICK: Swift.String
    @objc public static let ACTION_MODULEBUTTONPRESSED: Swift.String
    @objc public static let ACTION_TRANSFERINITIATED: Swift.String
    @objc public static let ACTION_TRANSFERCANCELLED: Swift.String
    @objc public static let MIXPANEL_ACTION_TRANSFERINITIATED: Swift.String
    @objc public static let MIXPANEL_ACTION_TRANSFERCANCELLED: Swift.String
    @objc public static let ACTION_RESALEINITIATED: Swift.String
    @objc public static let ACTION_RESALECANCELLED: Swift.String
    @objc public static let ACTION_RESALEEDITED: Swift.String
    @objc public static let MIXPANEL_ACTION_RESALEINITIATED: Swift.String
    @objc public static let MIXPANEL_ACTION_RESALECANCELLED: Swift.String
    @objc public static let MIXPANEL_ACTION_RESALEEDITED: Swift.String
    @objc public static let ACTION_FED_LOGIN_SCREEN_DISMISSED_AFTER_SUCCESS_LOGIN_NO_LINK: Swift.String
    @objc public static let ACTION_FED_LOGIN_LINK_ACCOUNTS_SCREEN_SHOWED: Swift.String
    @objc public static let ACTION_FED_LOGIN_LINK_ACCOUNTS_SCREEN_DISMISSED: Swift.String
    @objc public static let ACTION_GAME_DAY_MODAL_SHOWED: Swift.String
    @objc public static let ACTION_GAME_DAY_FLOW_REJECTED: Foundation.Notification.Name
    @objc public static let ACTION_GAME_DAY_FLOW_ACCEPTED: Swift.String
    @objc public static let ACTION_FED_LOGIN_NO_THANKS_BUTTON_PRESSED: Swift.String
    @objc public static let ACTION_FED_LOGIN_LINK_ACCOUNTS_BUTTON_PRESSED: Swift.String
    @objc public static let ACTION_ADD_TO_WALLET_INITIATE: Swift.String
    @objc public static let ACTION_ADD_TO_WALLET_CANCEL: Swift.String
    @objc public static let ACTION_ADD_TO_WALLET_FINISH: Swift.String
    @objc override dynamic public init()
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers @objcMembers final public class Data : ObjectiveC.NSObject {
    @objc public static let EVENT_ID: Swift.String
    @objc public static let EVENT_NAME: Swift.String
    @objc public static let EVENT_DATE: Swift.String
    @objc public static let EVENT_IMAGE_URL: Swift.String
    @objc public static let EVENT_ORDER_ID: Swift.String
    @objc public static let VENUE_NAME: Swift.String
    @objc public static let VENUE_ID: Swift.String
    @objc public static let CURRENT_TICKET_COUNT: Swift.String
    @objc public static let ARTIST_NAME: Swift.String
    @objc public static let ARTIST_ID: Swift.String
    @objc public static let SECTION: Swift.String
    @objc public static let ROW: Swift.String
    @objc public static let SEAT: Swift.String
    @objc public static let INITIATE_TRANSFER_TICKET_COUNT: Swift.String
    @objc public static let INITIATE_TRANSFER_TICKET_FACEVALUE: Swift.String
    @objc public static let CANCEL_TRANSFER_ID: Swift.String
    @objc public static let CANCEL_TRANSFER_ORDER_ID: Swift.String
    @objc public static let INITIATE_RESALE_TICKET_COUNT: Swift.String
    @objc public static let INITIATE_RESALE_PRICE: Swift.String
    @objc public static let TICKET_COUNT: Swift.String
    @objc public static let POSTING_ID: Swift.String
    @objc public static let PAYMENT_METHOD: Swift.String
    @objc public static let REFUND_METHOD: Swift.String
    @objc public static let LISTING_PRICE: Swift.String
    @objc public static let UPDATE_RESALE_POSTING_ID: Swift.String
    @objc public static let UPDATE_RESALE_PRICE: Swift.String
    @objc public static let RESALE_BUYER_FEES: Swift.String
    @objc public static let RESALE_ORIGINAL_FACE_VALUE: Swift.String
    @objc public static let RESALE_SELLER_PAYOUT: Swift.String
    @objc public static let RESALE_SELLER_FEES: Swift.String
    @objc public static let CANCEL_RESALE_POSTING_ID: Swift.String
    @objc override dynamic public init()
    @objc deinit
  }
  @objc override dynamic public init()
  @objc deinit
}
extension PresenceSDK.PSDK {
  @objc final public func startMFAValidation(on controller: UIKit.UIViewController, additionalProperties: [Swift.String : Any] = [String: Any](), success: @escaping (_ token: Swift.String) -> Swift.Void, failure: @escaping (_ error: Foundation.NSError) -> Swift.Void)
}
@objc public protocol PresenceMember {
  @objc var localId: Swift.String? { get }
  @objc var globalId: Swift.String? { get }
  @objc var firstName: Swift.String { get }
  @objc var lastName: Swift.String { get }
  @objc var email: Swift.String { get }
  @objc var postalCode: Swift.String { get }
  @objc var language: Swift.String { get }
  @objc var market: Swift.String { get }
  @objc var country: (any PresenceSDK.PresenceCountry)? { get }
  @objc var hmacId: Swift.String { get }
  @objc var doNotSellFlag: Swift.Bool { get }
  @objc var phone: Swift.String { get }
  @objc var idToken: Swift.String { get }
}
@objc public protocol PresenceCountry {
  @objc var id: Swift.Int { get }
  @objc var standard: Swift.String? { get }
  @objc var code: Swift.String? { get }
  @objc var name: Swift.String? { get }
}
extension Swift.UInt64 {
  @_specialize(exported: false, kind: full, where T == Swift.ArraySlice<Swift.UInt8>)
  @inlinable internal init<T>(bytes: T, fromIndex index: T.Index) where T : Swift.Collection, T.Element == Swift.UInt8, T.Index == Swift.Int {
    if bytes.isEmpty {
      self = 0
      return
    }

    let count = bytes.count

    let val0 = count > 0 ? UInt64(bytes[index.advanced(by: 0)]) << 56 : 0
    let val1 = count > 1 ? UInt64(bytes[index.advanced(by: 1)]) << 48 : 0
    let val2 = count > 2 ? UInt64(bytes[index.advanced(by: 2)]) << 40 : 0
    let val3 = count > 3 ? UInt64(bytes[index.advanced(by: 3)]) << 32 : 0
    let val4 = count > 4 ? UInt64(bytes[index.advanced(by: 4)]) << 24 : 0
    let val5 = count > 5 ? UInt64(bytes[index.advanced(by: 5)]) << 16 : 0
    let val6 = count > 6 ? UInt64(bytes[index.advanced(by: 6)]) << 8 : 0
    let val7 = count > 7 ? UInt64(bytes[index.advanced(by: 7)]) : 0

    self = val0 | val1 | val2 | val3 | val4 | val5 | val6 | val7
  }
}
@objc @_inheritsConvenienceInitializers public class PresenceOAuthProvider : ObjectiveC.NSObject, TicketmasterFoundation.TicketmasterOAuthDelegate {
  public func fetchLoginToken(for object: Swift.AnyObject, success: @escaping (_ userToken: TicketmasterFoundation.TicketmasterOAuthToken) -> Swift.Void, failure: @escaping () -> Swift.Void)
  public func fetchLoginTokenOrPresentUI(for object: Swift.AnyObject, success: @escaping (_ userToken: TicketmasterFoundation.TicketmasterOAuthToken) -> Swift.Void, failure: @escaping () -> Swift.Void)
  public func logoutThenPresentLoginUI(for object: Swift.AnyObject, options: [Swift.String : Any]?, success: @escaping (_ userToken: TicketmasterFoundation.TicketmasterOAuthToken) -> Swift.Void, failure: @escaping () -> Swift.Void)
  public func updateLoginToken(for object: Swift.AnyObject, success: @escaping (_ userToken: TicketmasterFoundation.TicketmasterOAuthToken) -> Swift.Void, failure: @escaping () -> Swift.Void)
  public func removeLoginToken(for object: Swift.AnyObject, success: @escaping () -> Swift.Void, failure: @escaping (_ userToken: TicketmasterFoundation.TicketmasterOAuthToken?) -> Swift.Void)
  public func fetch2FADeviceToken(for object: Swift.AnyObject, options: [Swift.String : Any], success: @escaping (_ mfaToken: Swift.String) -> Swift.Void, failure: @escaping (_ error: Foundation.NSError?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class PSDKTicketsModule : ObjectiveC.NSObject, Swift.Comparable {
  final public let identifier: Swift.String
  final public let headerDisplay: PresenceSDK.PSDKTicketsModule.HeaderDisplay?
  public var actionButtons: [PresenceSDK.PSDKTicketsModule.ActionButton]?
  public init(identifier: Swift.String, headerDisplay: PresenceSDK.PSDKTicketsModule.HeaderDisplay? = nil, actionButtons: [PresenceSDK.PSDKTicketsModule.ActionButton]? = nil)
  public static func < (lhs: PresenceSDK.PSDKTicketsModule, rhs: PresenceSDK.PSDKTicketsModule) -> Swift.Bool
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc public class HeaderDisplay : ObjectiveC.NSObject {
    final public let image: UIKit.UIImage?
    final public let view: UIKit.UIView?
    public init(image: UIKit.UIImage)
    public init(view: UIKit.UIView)
    @objc deinit
  }
  @objc public class ActionButton : ObjectiveC.NSObject {
    final public let title: Swift.String
    final public let callbackValue: Swift.String
    final public let webpageSettings: PresenceSDK.PSDKTicketsModule.WebpageSettings?
    final public let requiresSpecificOrder: Swift.Bool
    public var enabled: Swift.Bool
    public init(title: Swift.String, callbackValue: Swift.String? = nil, requiresSpecificOrder: Swift.Bool? = false, enabled: Swift.Bool? = true)
    public init(title: Swift.String, callbackValue: Swift.String? = nil, webpageSettings: PresenceSDK.PSDKTicketsModule.WebpageSettings, requiresSpecificOrder: Swift.Bool? = false, enabled: Swift.Bool? = true)
    @objc deinit
  }
  @objc public class WebpageSettings : ObjectiveC.NSObject {
    public var pageTitle: Swift.String
    public var urlRequest: Foundation.URLRequest
    public var openExternalURL: Swift.Bool
    public var internalPresentationStyle: UIKit.UIModalPresentationStyle?
    public var reloadTicketInfo: Swift.Bool
    public var oauthCookieSettings: PresenceSDK.PSDKTicketsModule.OAuthCookieSettings?
    public init(pageTitle: Swift.String, urlRequest: Foundation.URLRequest, openExternalURL: Swift.Bool? = false, internalPresentationStyle: UIKit.UIModalPresentationStyle? = nil, reloadTicketInfo: Swift.Bool? = false, oauthCookieSettings: PresenceSDK.PSDKTicketsModule.OAuthCookieSettings? = nil)
    @objc deinit
  }
  @objc public class OAuthCookieSettings : ObjectiveC.NSObject {
    public var name: Swift.String
    public var value: Swift.String?
    public var webDomains: [Swift.String]
    public var backend: PresenceSDK.PSDK.BackendName?
    public init(name: Swift.String, webDomains: [Swift.String], backend: PresenceSDK.PSDK.BackendName)
    public init(name: Swift.String, value: Swift.String?, webDomains: [Swift.String])
    @objc deinit
  }
  @objc deinit
}
extension Swift.String : Swift.Error {
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "Renamed to PresenceView")
@objcMembers @IBDesignable @_Concurrency.MainActor(unsafe) final public class PresenceSDKView : PresenceSDK.PresenceView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @IBDesignable @_Concurrency.MainActor(unsafe) public class PresenceView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToWindow()
  @objc @_Concurrency.MainActor(unsafe) public func refreshView()
  @objc deinit
}
extension PresenceSDK.PSDKTicketsModule {
  public static func moduleArray(jsonDict: [Swift.String : Any]) -> [PresenceSDK.PSDKTicketsModule]?
}
@objc public protocol PresenceLoginDelegate {
  @objc optional func onLoginWindowDidDisplay(backendName: PresenceSDK.PSDK.BackendName)
  @objc optional func onLoginForgotPasswordClicked(backendName: PresenceSDK.PSDK.BackendName)
  @objc optional func onLoginMethodUsed(backendName: PresenceSDK.PSDK.BackendName, loginMethod: PresenceSDK.PSDK.LoginMethod)
  @objc optional func onLoginSuccessful(backendName: PresenceSDK.PSDK.BackendName, accessToken: Swift.String)
  @objc optional func onLoginCancelled(backendName: PresenceSDK.PSDK.BackendName)
  @objc optional func onLoginFailed(backendName: PresenceSDK.PSDK.BackendName, error: Foundation.NSError)
  @objc optional func onTokenRefreshed(backendName: PresenceSDK.PSDK.BackendName, accessToken: Swift.String)
  @objc optional func onRefreshTokenFailed(backendName: PresenceSDK.PSDK.BackendName)
  @objc optional func onRefreshTokenExpired(backendName: PresenceSDK.PSDK.BackendName)
  @objc optional func onLogoutSuccessful(backendName: PresenceSDK.PSDK.BackendName)
  @objc optional func onLogoutFailed(backendName: PresenceSDK.PSDK.BackendName, error: any Swift.Error)
  @objc optional func onLogoutAllSuccessful()
  @objc optional func onMemberUpdated(backendName: PresenceSDK.PSDK.BackendName, member: any PresenceSDK.PresenceMember)
  @objc optional func onCacheCleared()
}
extension Swift.UInt32 {
  @_specialize(exported: false, kind: full, where T == Swift.ArraySlice<Swift.UInt8>)
  @inlinable internal init<T>(bytes: T, fromIndex index: T.Index) where T : Swift.Collection, T.Element == Swift.UInt8, T.Index == Swift.Int {
    if bytes.isEmpty {
      self = 0
      return
    }

    let count = bytes.count

    let val0 = count > 0 ? UInt32(bytes[index.advanced(by: 0)]) << 24 : 0
    let val1 = count > 1 ? UInt32(bytes[index.advanced(by: 1)]) << 16 : 0
    let val2 = count > 2 ? UInt32(bytes[index.advanced(by: 2)]) << 8 : 0
    let val3 = count > 3 ? UInt32(bytes[index.advanced(by: 3)]) : 0

    self = val0 | val1 | val2 | val3
  }
}
@_specialize(exported: false, kind: full, where T == Swift.Int)
@_specialize(exported: false, kind: full, where T == Swift.UInt)
@_specialize(exported: false, kind: full, where T == Swift.UInt8)
@_specialize(exported: false, kind: full, where T == Swift.UInt16)
@_specialize(exported: false, kind: full, where T == Swift.UInt32)
@_specialize(exported: false, kind: full, where T == Swift.UInt64)
@inlinable internal func arrayOfBytes<T>(value: T, length totalBytes: Swift.Int = MemoryLayout<T>.size) -> Swift.Array<Swift.UInt8> where T : Swift.FixedWidthInteger {
  let valuePointer = UnsafeMutablePointer<T>.allocate(capacity: 1)
  valuePointer.pointee = value

  let bytesPointer = UnsafeMutablePointer<UInt8>(OpaquePointer(valuePointer))
  var bytes = Array<UInt8>(repeating: 0, count: totalBytes)
  for j in 0..<min(MemoryLayout<T>.size, totalBytes) {
    bytes[totalBytes - 1 - j] = (bytesPointer + j).pointee
  }

  valuePointer.deinitialize(count: 1)
  valuePointer.deallocate()

  return bytes
}
extension UIKit.UIViewController : AuthenticationServices.ASWebAuthenticationPresentationContextProviding {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func presentationAnchor(for session: AuthenticationServices.ASWebAuthenticationSession) -> AuthenticationServices.ASPresentationAnchor
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PresenceViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol PresenceOrderDelegate {
  @objc optional func presentArtistDetailsPage(with artistId: Swift.String)
  @objc optional func presentEventDetailsPage(with eventId: Swift.String)
  @objc optional func presentVenueDetailsPage(with venueId: Swift.String)
  @objc optional func presentClientAppPage(with deeplink: Swift.String)
  @objc optional func didUpdateEvents(eventOrdersArray: [PresenceSDK.PresenceEventOrders])
  @objc optional func didUpdateTickets(eventOrders: PresenceSDK.PresenceEventOrders)
  @available(*, deprecated, message: "Renamed didUpdateEvents(eventOrdersArray: [PresenceEventOrders])")
  @objc optional func didUpdateOrderedEvents()
  @available(*, deprecated, message: "Renamed didUpdateTickets(eventOrders: PresenceEventOrders)")
  @objc optional func didUpdateTickets(eventId: Swift.String)
  @objc optional func handleBarButtonAction(page: PresenceSDK.PSDK.PresencePage, screenTitleName: Swift.String?, eventOrders: PresenceSDK.PresenceEventOrders?)
  @available(*, deprecated, message: "Renamed handleBarButtonAction(page:screenTitleName:eventOrders:)")
  @objc optional func handleBarButtonAction(page: PresenceSDK.PSDK.PresencePage, buttonTitle: Swift.String, eventOrders: PresenceSDK.PresenceEventOrders?)
  @objc optional func didPresentEventList()
  @objc optional func didPresentTicketList()
}
@usableFromInline
internal struct BatchedCollectionIndex<Base> where Base : Swift.Collection {
}
extension PresenceSDK.BatchedCollectionIndex : Swift.Comparable {
  @usableFromInline
  internal static func == <Base>(lhs: PresenceSDK.BatchedCollectionIndex<Base>, rhs: PresenceSDK.BatchedCollectionIndex<Base>) -> Swift.Bool where Base : Swift.Collection
  @usableFromInline
  internal static func < <Base>(lhs: PresenceSDK.BatchedCollectionIndex<Base>, rhs: PresenceSDK.BatchedCollectionIndex<Base>) -> Swift.Bool where Base : Swift.Collection
}
@usableFromInline
internal struct BatchedCollection<Base> : Swift.Collection where Base : Swift.Collection {
  @usableFromInline
  internal init(base: Base, size: Swift.Int)
  @usableFromInline
  internal typealias Index = PresenceSDK.BatchedCollectionIndex<Base>
  @usableFromInline
  internal var startIndex: PresenceSDK.BatchedCollection<Base>.Index {
    get
  }
  @usableFromInline
  internal var endIndex: PresenceSDK.BatchedCollection<Base>.Index {
    get
  }
  @usableFromInline
  internal func index(after idx: PresenceSDK.BatchedCollection<Base>.Index) -> PresenceSDK.BatchedCollection<Base>.Index
  @usableFromInline
  internal subscript(idx: PresenceSDK.BatchedCollection<Base>.Index) -> Base.SubSequence {
    get
  }
  @usableFromInline
  internal typealias Element = Base.SubSequence
  @usableFromInline
  internal typealias Indices = Swift.DefaultIndices<PresenceSDK.BatchedCollection<Base>>
  @usableFromInline
  internal typealias Iterator = Swift.IndexingIterator<PresenceSDK.BatchedCollection<Base>>
  @usableFromInline
  internal typealias SubSequence = Swift.Slice<PresenceSDK.BatchedCollection<Base>>
}
extension Swift.Collection {
  @inlinable internal func batched(by size: Swift.Int) -> PresenceSDK.BatchedCollection<Self> {
    BatchedCollection(base: self, size: size)
  }
}
extension PresenceSDK.PSDK.IdentityTheme : Swift.Equatable {}
extension PresenceSDK.PSDK.IdentityTheme : Swift.Hashable {}
extension PresenceSDK.PSDK.IdentityTheme : Swift.RawRepresentable {}
extension PresenceSDK.PSDK.LoginButtons : Swift.Equatable {}
extension PresenceSDK.PSDK.LoginButtons : Swift.Hashable {}
extension PresenceSDK.PSDK.LoginButtons : Swift.RawRepresentable {}
extension PresenceSDK.PSDK.SDKEnvironment : Swift.Equatable {}
extension PresenceSDK.PSDK.SDKEnvironment : Swift.Hashable {}
extension PresenceSDK.PSDK.SDKEnvironment : Swift.RawRepresentable {}
extension PresenceSDK.PSDKTicketsModule.PrebuiltModuleName : Swift.Equatable {}
extension PresenceSDK.PSDKTicketsModule.PrebuiltModuleName : Swift.Hashable {}
extension PresenceSDK.PSDKTicketsModule.PrebuiltModuleName : Swift.RawRepresentable {}
extension PresenceSDK.PSDKTicketsModule.PrebuiltButtonCallbackName : Swift.Equatable {}
extension PresenceSDK.PSDKTicketsModule.PrebuiltButtonCallbackName : Swift.Hashable {}
extension PresenceSDK.PSDKTicketsModule.PrebuiltButtonCallbackName : Swift.RawRepresentable {}
extension PresenceSDK.PSDK.BackendName : Swift.Equatable {}
extension PresenceSDK.PSDK.BackendName : Swift.Hashable {}
extension PresenceSDK.PSDK.BackendName : Swift.RawRepresentable {}
extension PresenceSDK.PSDK.LoginMethod : Swift.Equatable {}
extension PresenceSDK.PSDK.LoginMethod : Swift.Hashable {}
extension PresenceSDK.PSDK.LoginMethod : Swift.RawRepresentable {}
extension PresenceSDK.PSDK.HostEnvironment : Swift.Equatable {}
extension PresenceSDK.PSDK.HostEnvironment : Swift.Hashable {}
extension PresenceSDK.PSDK.HostEnvironment : Swift.RawRepresentable {}
extension PresenceSDK.PSDK.SDKTheme : Swift.Equatable {}
extension PresenceSDK.PSDK.SDKTheme : Swift.Hashable {}
extension PresenceSDK.PSDK.SDKTheme : Swift.RawRepresentable {}
extension PresenceSDK.PSDK.VenueConcessionsButtonType : Swift.Equatable {}
extension PresenceSDK.PSDK.VenueConcessionsButtonType : Swift.Hashable {}
extension PresenceSDK.PSDK.VenueConcessionsButtonType : Swift.RawRepresentable {}
extension PresenceSDK.PSDK.IdType : Swift.Equatable {}
extension PresenceSDK.PSDK.IdType : Swift.Hashable {}
extension PresenceSDK.PSDK.IdType : Swift.RawRepresentable {}
extension PresenceSDK.PSDK.ActionType : Swift.Equatable {}
extension PresenceSDK.PSDK.ActionType : Swift.Hashable {}
extension PresenceSDK.PSDK.ActionType : Swift.RawRepresentable {}
extension PresenceSDK.PSDK.PresencePage : Swift.Equatable {}
extension PresenceSDK.PSDK.PresencePage : Swift.Hashable {}
extension PresenceSDK.PSDK.PresencePage : Swift.RawRepresentable {}
extension PresenceSDK.PresenceDelivery.DeliverySource : Swift.Hashable {}
extension PresenceSDK.PresenceDelivery.DeliverySegmentType : Swift.Hashable {}
