#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef PRESENCESDK_SWIFT_H
#define PRESENCESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AuthenticationServices;
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PresenceSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)















/// Main class for the SDK.
/// <h2>Accessing the PresenceSDK</h2>
/// All public methods are accessible by calling the PresenceSDK class singleton:
/// \code
/// PSDK.shared
///
/// \endcode<h2>Configuring the PresenceSDK</h2>
/// The PresenceSDK requires an API key (consumer key) to function. Configure the PresenceSDK before calling any other methods on it:
/// \code
/// PSDK.shared.setConfig(consumerKey: "<yourConsumerKey>")
///
/// \endcode<h2>Setting Branding and Theme color</h2>
/// The branding color can be simply set by passing the preferred color as an argument when calling:
/// \code
/// let colors = PSDK.BrandingColors(oneColor: UIColor.red)
/// PSDK.shared.setBrandingColors(colors)
///
/// \endcodeWhen setting a light branding color like white, it can problematic for the user to see vital UI elements such as Navigation Bar Buttons, Button Titles, and Section:Row:Seat information. Setting the theme color to dark is recommended when a light branding color is defined.
/// \code
/// PSDK.shared.setTheme(theme: PSDK.SDKTheme.Dark)
///
/// \endcodeMethod to override normal branding colors with Ticketmaster blue on certain buttons (Login, Transfer, Sell, Orders, Modules)
/// \code
/// PSDK.shared.enableTMBrandingColorOverride()
///
/// \endcodeMethod to let PSDK know it shouldn’t brand navigation bar on start. Needs to get called before PSDK.shared.setConfiguration(:)
/// \code
/// PSDK.shared.doNotBrandNavBar()
///
/// \endcode<h2>Viewing Orders and Tickets</h2>
/// Present the <code>PresenceView</code> somewhere in your UI, then start the PresenceSDK can be done by calling:
/// \code
/// var presenceView = PresenceView()
/// PSDK.shared.start(presenceView: presenceView)
///
/// \endcodeYou can directly open a known Event or Order by calling:
/// \code
/// PSDK.shared.jumpToOrderOrEvent(id: "<knownOrderOrEventID>")
///
/// \endcode<h2>Manual Login / Logout</h2>
/// Presence SDK automatically presents login UI when trying to view Orders or Tickets. However, login may be presented manually by calling:
/// \code
/// PSDK.shared.login(to: .AccountManager)
///
/// \endcodeLogin state may fetched at any time:
/// \code
/// let userLoggedIn = PSDK.shared.isLoggedIn()
///
/// \endcodeLogout may also be forced manually:
/// \code
/// PSDK.shared.logout()
///
/// \endcode<h2>Get User Info</h2>
/// Once logged in, user information may be fetched from PresenceSDK by calling:
/// \code
/// PSDK.shared.getMemberInfo(backendName: .AccountManager,
///                           completion { (member: PresenceMember?, error: Error?) })
///
/// \endcode<h2>Get OAuth Token</h2>
/// If your app communicates with other Ticketmaster SDKs or services, you may want the user’s OAuth token:
/// \code
/// PSDK.shared.getAccessToken(backendName: .AccountManager,
///                            presentLoginUI: true,
///                            success: { (accessToken: String) },
///                            failure: { (error: Error?, canceled: Bool) })
///
/// \endcodeNote that by setting <code>presentLoginUI</code> to <code>false</code>, you can try and fetch an access token without triggering the login UI popup.
/// Access tokens that are expired (or about to expire) will be automatically refreshed if possible.
/// <h2>Be Informed</h2>
/// If your app wants to know about operations inside the Presence SDK, your class can optionally conform to the <code>PresenceLoginDelegate</code> or <code>PresenceOrderDelegate</code>:
/// \code
/// PSDK.shared.loginDelegate = self
/// PSDK.shared.orderDelegate = self
///
/// \endcode<h2>Event-Specific Action Button</h2>
/// You can display an action button (such as “Help”) on the navigation bar inside the “My Tickets” view:
/// \code
/// PSDK.shared.setTicketsActionButtonText(title: "Help")
/// PSDK.shared.orderDelegate = self
///
/// \endcodeBy conforming to the <code>PresenceOrderDelegate.handleBarButtonAction</code> you will be informed if the user pressed the action button, in which screen it was pressed and which Event/Order they pressed it on.
/// <h2>Venue Concessions</h2>
/// If your app implements venue concessions, you present an upsell module right inside the “My Tickets” view by conforming to the <code>PresenceVenueDelegate</code>:
/// \code
/// PSDK.shared.venueDelegate = self
///
/// \endcode<h2>More Info</h2>
/// For more information, please visit our <a href="https://developer.ticketmaster.com/products-and-docs/sdks/presence-sdk/">Devportal for Presence SDK</a>.
/// You can also find a demo integration project to quickly learn how to integrate the Presence SDK <a href="https://developer.ticketmaster.com/products-and-docs/sdks/presence-sdk/iOS/index.html">Demo Integration Project</a>.
SWIFT_CLASS("_TtC11PresenceSDK4PSDK")
@interface PSDK : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;

@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
/// present an Action Button in the top-right Navbar on the Tickets page
/// When the button is pressed, <code>orderDelegate.handleBarButtonAction(page:screenTitleName:eventOrders:)</code> will be called.
/// Along with some basic info about the Page, Event, and Order the user is viewing on the Tickets page.
/// \param title title of Action Button, <code>nil</code> = no button (default)
///
- (void)setTicketsActionButtonTextWithTitle:(NSString * _Nullable)title;
@end


@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
@end

enum HostEnvironment : NSInteger;
enum SDKEnvironment : NSInteger;

SWIFT_CLASS("_TtCC11PresenceSDK4PSDK13Configuration")
@interface Configuration : NSObject
- (nonnull instancetype)initWithConsumerKey:(NSString * _Nonnull)consumerKey hostEnvironment:(enum HostEnvironment)hostEnvironment sdkEnvironment:(enum SDKEnvironment)sdkEnvironment displayName:(NSString * _Nullable)displayName useNewAccountsManager:(BOOL)useNewAccountsManager disableModernAccounts:(BOOL)disableModernAccounts quickLogin:(BOOL)quickLogin autoLogin:(BOOL)autoLogin OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





@class UIViewController;
@class NSError;

@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
/// Method to get the logged in user’s information.
/// \param controller UIViewController to present MFA webviews on top of.
///
/// \param additionalProperties Required MFA configuration settings
///
/// \param success Completion block to be called containing MFA token.
///
/// \param token MFA token
///
/// \param failure Completion block to be called containing error information.
///
/// \param error MFA error
///
- (void)startMFAValidationOn:(UIViewController * _Nonnull)controller additionalProperties:(NSDictionary<NSString *, id> * _Nonnull)additionalProperties success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end


enum BackendName : NSInteger;

@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
/// Method to login via Webview Login
/// You can receive updates for the login process by confirming to PresenceLoginDelegate protocol
/// \param backendName <code>Host</code>, <code>AccountManager</code> or <code>SportXR</code>
///
/// \param completion success: Bool, login was completed successfully
///
- (void)loginTo:(enum BackendName)backendName completion:(void (^ _Nullable)(BOOL))completion;
@end


@protocol PresenceMember;

@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
/// Method to get the logged in user’s information.
/// \param backendName The specified backend name where the SDK will retrive member information from.
///
/// \param completion 
///
/// \param member An optional PresenceMember object returned in the completion block callback.
///
/// \param error If PresenceSDK failed to retrive member information, an error will returned in the completion block callback.
///
- (void)getMemberInfoWithBackendName:(enum BackendName)backendName completion:(void (^ _Nonnull)(id <PresenceMember> _Nullable, NSError * _Nullable))completion;
@end

@class PresenceSDKView;
@protocol PresenceLoginDelegate;
@protocol PresenceOrderDelegate;

@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
- (void)startWithPresenceSDKView:(PresenceSDKView * _Nullable)presenceSDKView loginDelegate:(id <PresenceLoginDelegate> _Nullable)loginDelegate orderDelegate:(id <PresenceOrderDelegate> _Nullable)orderDelegate SWIFT_DEPRECATED_MSG("Renamed to start(presenceView: PresenceView, ...)");
@end


@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
/// Method for getting a valid OAUTH Access Token. Note that this will present login UI if the user is not logged in.
/// \param backendName Token for Host, AccountManager, or SportXR
///
/// \param success This block will be called when a valid token is fetched successfully, the success block will provide a valid access token.
///
/// \param failure This block will be called when there is some error fetching the token, the failure block will provide an error object.
///
- (void)getAccessTokenWithBackendName:(enum BackendName)backendName success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nullable, BOOL))failure;
/// Method for getting a valid OAUTH Access Token.
/// \param backendName Token for Host, AccountManager, or SportXR
///
/// \param presentLoginUI upon failure (not logged in or refresh token expired), automatically present login UI to user
///
/// \param success This block will be called when a valid token is fetched successfully, the success block will provide a valid access token.
///
/// \param failure This block will be called when there is some error fetching the token, the failure block will provide an error object.
///
- (void)getAccessTokenWithBackendName:(enum BackendName)backendName presentLoginUI:(BOOL)presentLoginUI success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nullable, BOOL))failure;
@end

enum LoginButtons : NSInteger;

@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
/// Method to reser password for a Host Account
/// \param success This block will be called when a valid token is fetched successfully, the success block will provide a valid access token.
///
/// \param failure This block will be called when there is some error fetching the token, the failure block will provide an error object.
///
/// \param token Password reset token (if any), used to quickly identify which account is being reset
///
- (void)resetPasswordForHostWithSuccess:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nullable, BOOL))failure token:(NSString * _Nullable)token;
/// Property to choose an available action button for Team account on the Login Screen.
/// Default value is LoginButtons.forgotPassword
@property (nonatomic) enum LoginButtons loginButton;
@end




enum IdType : NSInteger;
enum ActionType : NSInteger;

@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
/// Display modally a View Controller with order/event information for the given identifier.
/// Shows events if the particular order is not found.
- (void)jumpToOrderOrEventWithId:(NSString * _Nonnull)id;
/// Display modally a View Controller with order/event information for the given identifier.
/// Shows events if the particular order/event is not found.
- (void)jumpToOrderOrEventWithId:(NSString * _Nonnull)id type:(enum IdType)type;
/// Display modally a View Controller with order/event information for the given identifier and perform the action
/// Shows events if the particular order/event is not found.
- (void)jumpToOrderOrEventWithId:(NSString * _Nonnull)id type:(enum IdType)type action:(enum ActionType)action;
/// Display modally a View Controller with order/event information for the given identifier and perform the action
/// Shows events if the particular order/event is not found.
- (void)jumpToOrderOrEventWithId:(NSString * _Nonnull)id type:(enum IdType)type action:(enum ActionType)action orderDelegate:(id <PresenceOrderDelegate> _Nullable)orderDelegate SWIFT_DEPRECATED_MSG("Use jumpToOrderOrEvent(id:type:action:) and set orderDelegate directly on PSDK.shared");
@end


@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
/// Method to log out user from all the logged-in accounts (w/o parameters for objc compatibility)
- (void)logOut SWIFT_DEPRECATED_MSG("Use logout(completion:) instead for proper OAuth2 logout handling");
/// Method to log out user from all the logged-in accounts
/// \param forceLogout true = logout locally, regardless of response from server
///
/// \param completion 
///
/// \param hostSuccess Bool, user logged out of Host
///
/// \param hostError Error, error logging out of Host
///
/// \param teamSuccess Bool, user logged out of AccountManager
///
/// \param teamError Error, error logging out of AccountManager
///
/// \param sportXRSuccess Bool, user logged out of SportXR
///
/// \param sportXRError Error, error logging out of SportXR
///
- (void)logOutWithForceLogout:(BOOL)forceLogout completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable, BOOL, NSError * _Nullable, BOOL, NSError * _Nullable))completion;
/// Method to log out user from specific logged-in accounts
/// \param backendName logout on Host, AccountManager, or SportXR
///
/// \param forceLogout true = logout locally, regardless of response from server
///
/// \param success This block will be called when logout was completed successfully.
///
/// \param failure This block will be called when there is some error logging out.
/// <ul>
///   <li>
///     error: Logout error
///   </li>
/// </ul>
///
- (void)logoutWithBackendName:(enum BackendName)backendName forceLogout:(BOOL)forceLogout success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Method to log out user from Ticketmaster account
/// \param forceLogout true = logout locally, regardless of response from server
///
/// \param success This block will be called when logout was completed successfully.
///
/// \param failure This block will be called when there is some error logging out.
///
/// \param error Logout error
///
- (void)logOutHostWithForceLogout:(BOOL)forceLogout success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Method to log out user from Team account
/// \param forceLogout true = logout locally, regardless of response from server
///
/// \param success This block will be called when logout was completed successfully.
///
/// \param failure This block will be called when there is some error logging out.
///
/// \param error Logout error
///
- (void)logOutTeamWithForceLogout:(BOOL)forceLogout success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Method to log out user from SportXR account
/// \param forceLogout true = logout locally, regardless of response from server
///
/// \param success This block will be called when logout was completed successfully.
///
/// \param failure This block will be called when there is some error logging out.
///
/// \param error Logout error
///
- (void)logOutSportXRWithForceLogout:(BOOL)forceLogout success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end



@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
/// Method to check if user is logged into any backend services, and has a valid (un-expired) access token available.
///
/// returns:
/// True if user is logged in any backend services and has valid access token available, otherwise returns false.
- (BOOL)isLoggedIn SWIFT_WARN_UNUSED_RESULT;
/// Method to check if user is logged into <code>Host</code> backend service, and has a valid (un-expired) access token available.
///
/// returns:
/// True if user is logged into <code>Host</code> and has a valid access token available, otherwise returns false.
- (BOOL)isLoggedIntoHost SWIFT_WARN_UNUSED_RESULT;
/// Method to check if user is logged into Team <code>AccountsManager</code> backend service, and has a valid (un-expired) access token available.
///
/// returns:
/// True if user is logged into Team <code>AccountsManager</code> and has a valid access token available, otherwise returns false.
- (BOOL)isLoggedIntoTeam SWIFT_WARN_UNUSED_RESULT;
/// Method to check if user is logged into <code>SportXR</code> backend service, and has a valid (un-expired) access token available.
///
/// returns:
/// True if user is logged into <code>SportXR</code> and has a valid access token available, otherwise returns false.
- (BOOL)isLoggedIntoSportXR SWIFT_WARN_UNUSED_RESULT;
/// Method to check if user has signed into any backend services, but may or may not have a valid (un-expired) access token.
///
/// returns:
/// True if user is signed into any backend services, but may or may not have a valid access token, otherwise returns false.
- (BOOL)hasUserSignedIn SWIFT_WARN_UNUSED_RESULT;
/// Method to check if user is signed into <code>Host</code> backend service, but may or may not have a valid (un-expired) access token.
///
/// returns:
/// True if user is signed into <code>Host</code>, but may or may not have a valid access token, otherwise returns false.
- (BOOL)hasUserSignedInHost SWIFT_WARN_UNUSED_RESULT;
/// Method to check if user is signed into Team <code>AccountsManager</code> backend service, but may or may not have a valid (un-expired) access token.
///
/// returns:
/// True if user is signed into Team <code>AccountsManager</code>, but may or may not have a valid access token, otherwise returns false.
- (BOOL)hasUserSignedInTeam SWIFT_WARN_UNUSED_RESULT;
/// Method to check if user is signed into <code>SportXR</code> backend service, but may or may not have a valid (un-expired) access token.
///
/// returns:
/// True if user is signed into <code>SportXR</code>, but may or may not have a valid access token, otherwise returns false.
- (BOOL)hasUserSignedInSportXR SWIFT_WARN_UNUSED_RESULT;
@end


@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
@end

/// Name of the backend in which an action was perform
typedef SWIFT_ENUM(NSInteger, BackendName, open) {
/// US or UK Ticketmaster Host
  BackendNameHost = 0,
/// Team Archtics Account Manager
  BackendNameAccountManager = 1,
/// Team Sport XR
  BackendNameSportXR = 2,
};

/// Name of methods used to log in
typedef SWIFT_ENUM(NSInteger, LoginMethod, open) {
/// Get access token by username and password
  LoginMethodConventional = 0,
/// Get access token automatically by using refresh token
  LoginMethodAutomatic = 1,
/// Get access token by finger print
  LoginMethodFingerprint = 2,
};

/// Account and Ticket source environments (backend servers)
typedef SWIFT_ENUM(NSInteger, HostEnvironment, open) {
/// US (North American) Host
  HostEnvironmentUS = 0,
/// UK Host
  HostEnvironmentUK = 1,
};

/// Production and other build environments (backend servers)
typedef SWIFT_ENUM(NSInteger, SDKEnvironment, open) {
/// Production
  SDKEnvironmentProduction = 0,
/// Staging
  SDKEnvironmentStaging = 1,
/// Pre Production
  SDKEnvironmentPreProduction = 2,
/// Development
  SDKEnvironmentDevelopment = 3,
};

/// Switches between app themes
/// <ul>
///   <li>
///     Light: Important UI elements will be colored white.
///   </li>
///   <li>
///     Dark: Important UI elements will be colored black.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SDKTheme, open) {
/// Important UI elements will be colored white.
  SDKThemeLight = 0,
/// Important UI elements will be colored black.
  SDKThemeDark = 1,
};

typedef SWIFT_ENUM(NSInteger, VenueConcessionsButtonType, open) {
  VenueConcessionsButtonTypeOrder = 0,
  VenueConcessionsButtonTypeWallet = 1,
};

typedef SWIFT_ENUM(NSInteger, IdType, open) {
/// Search for event with the given identifier
  IdTypeEvent = 0,
/// Search for order with the given identifier
  IdTypeOrder = 1,
/// Search for event or order with the given identifier
  IdTypeAny = 2,
};

typedef SWIFT_ENUM(NSInteger, ActionType, open) {
/// automatically show posting flow
  ActionTypePosting = 0,
/// automatically show transfer flow
  ActionTypeTransfer = 1,
};

typedef SWIFT_ENUM(NSInteger, LoginButtons, open) {
  LoginButtonsForgotPassword = 0,
  LoginButtonsCreateAccount = 1,
};

typedef SWIFT_ENUM(NSInteger, PresencePage, open) {
  PresencePageNone = 0,
  PresencePageMyEvents = 1,
  PresencePageMyTickets = 2,
  PresencePageMyTicketDetail = 3,
  PresencePageModule = 4,
  PresencePageViewBarcode = 5,
};

@class UIColor;

/// Pass to <code>PSDK.shared.setBrandingColors</code> to customize the color of UI elements by overridding their respective properties.
SWIFT_CLASS("_TtCC11PresenceSDK4PSDK14BrandingColors")
@interface BrandingColors : NSObject
- (nonnull instancetype)initWithNavBarColor:(UIColor * _Nonnull)navBarColor ticketColor:(UIColor * _Nonnull)ticketColor buttonColor:(UIColor * _Nonnull)buttonColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOneColor:(UIColor * _Nonnull)oneColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// theme visual style of Identity page
typedef SWIFT_ENUM(NSInteger, IdentityTheme, open) {
  IdentityThemeTicketmaster = 0,
  IdentityThemeTicketmasterNew = 1,
  IdentityThemeLivenation = 2,
};


@class UIImage;

@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
/// Method for configuring PresenceSDK.
/// \param consumerKey The Consumer Key associated with your App on developer.ticketmaster.com
///
/// \param hostEnvironment Account and Ticket source backend server stack, default = .US
///
/// \param sdkEnvironment Production or other test build environments, default = .Production
///
/// \param displayName Team/App name that will be displayed on the login page in the SDK
///
/// \param useNewAccountsManager Use new Team AccountsManager: true (am.ticketmaster.com), false (oss.ticketmaster.com), default = true
///
/// \param disableModernAccounts Manually disable ModernAccounts login, default = false
///
/// \param quickLogin Use the new, quick login screen (ModernAccounts only), default = true
///
/// \param autoLogin Automatically present login prompt (quickLogin only, ModernAccounts only), default = true
///
- (void)setConfigWithConsumerKey:(NSString * _Nonnull)consumerKey hostEnvironment:(enum HostEnvironment)hostEnvironment sdkEnvironment:(enum SDKEnvironment)sdkEnvironment displayName:(NSString * _Nullable)displayName useNewAccountsManager:(BOOL)useNewAccountsManager disableModernAccounts:(BOOL)disableModernAccounts quickLogin:(BOOL)quickLogin autoLogin:(BOOL)autoLogin;
/// Method for configuring PresenceSDK.
/// \param configuration PSDK.Configuration object containing various integrator-customizable settings
///
- (void)setConfiguration:(Configuration * _Nonnull)configuration;
/// Method for checking configuration of PresenceSDK for Teams
/// \param success Called if configuration was readed from cache or returned from Apigee, main queue. The <code>start(presenceView:)</code> method should be called in this success block.
///
/// \param failure Called if configuration failed (e.g. no Internet on first launch), Should be taken into account during SDK integration.
///
- (void)checkConfigWithSuccess:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// Method for configuring Team Apps branding colors in PresenceSDK. These branding colors will be used
/// on various UI elements of the SDK to provide a custom look for Team apps.
/// \param brandingColors Customize colors by overriding properties of the <code>BrandingColors</code> class.
///
- (void)setBrandingColors:(BrandingColors * _Nonnull)brandingColors;
/// Method to override normal branding colors with Ticketmaster blue on certain buttons (Login, Transfer, Sell, Orders, Modules)
- (void)enableTMBrandingColorOverride;
/// Method to let PSDK know it shouldn’t brand navigation bar on start. Needs to get called before PSDK.shared.setConfiguration(:)
- (void)doNotBrandNavBar;
/// Method for configuring Team Apps logo in PresenceSDK.
/// \param image Image to be used in the SDK as logo.
///
- (void)setLogo:(UIImage * _Nullable)image;
/// Method for configuring Team Apps theme color in PresenceSDK. This theme color will be used
/// on various UI elements of the SDK to provide a custom look for Team apps.
/// \param theme Theme to be used in the SDK.
///
- (void)setThemeWithTheme:(enum SDKTheme)theme;
/// Method to enable or disable User Tracking in PresenceSDK.
/// Default: enabled (controlled by PresenceMember.doNotSell flag)
- (void)setUserTrackingWithEnabled:(BOOL)enabled;
@end



/// quickly build a PresenceModule Header UIView
/// <ul>
///   <li>
///     Example Usage:
///   </li>
/// </ul>
/// <code>let headerView = PresenceModuleHeaderView.build()</code>
/// <code>headerView.configure(...)</code>
/// <code>let header = PSDKTicketsModule.HeaderDisplay(view: headerView)</code>
/// <code>let action1 = PSDKTicketsModule.ActionButton(title: "Action1")</code>
/// <code>let action2 = PSDKTicketsModule.ActionButton(title: "Action2")</code>
/// <code>let module = PSDKTicketsModule(identifier: "com.myApp.myModule", headerDisplay: header, actionButtons: [action1, action2])</code>
SWIFT_CLASS("_TtC11PresenceSDK17PSDKTicketsModule")
@interface PSDKTicketsModule : NSObject
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








SWIFT_CLASS("_TtC11PresenceSDK18PresenceAttraction")
@interface PresenceAttraction : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// a UIColor Codable
SWIFT_CLASS("_TtC11PresenceSDK13PresenceColor")
@interface PresenceColor : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Country protocol representing country of currently logged in user
SWIFT_PROTOCOL("_TtP11PresenceSDK15PresenceCountry_")
@protocol PresenceCountry
/// Host country id, -1 for Account Manager
@property (nonatomic, readonly) NSInteger id;
/// Host country standard, nil for Account Manager
@property (nonatomic, readonly, copy) NSString * _Nullable standard;
/// AccountManager country code, nil for Host
@property (nonatomic, readonly, copy) NSString * _Nullable code;
/// AccountManager country name, nil for Host
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@end


SWIFT_CLASS("_TtC11PresenceSDK16PresenceDateInfo")
@interface PresenceDateInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11PresenceSDK16PresenceDelivery")
@interface PresenceDelivery : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// an Event purchased by the user
SWIFT_CLASS("_TtC11PresenceSDK13PresenceEvent")
@interface PresenceEvent : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Presence SDK Analytics class for tracking user activity
SWIFT_CLASS("_TtC11PresenceSDK22PresenceEventAnalytics")
@interface PresenceEventAnalytics : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// a list of Orders user has purchased for a particular Event
SWIFT_CLASS("_TtC11PresenceSDK19PresenceEventOrders")
@interface PresenceEventOrders : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







SWIFT_CLASS("_TtC11PresenceSDK19PresenceHealthCheck")
@interface PresenceHealthCheck : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11PresenceSDK20PresenceHostBranding")
@interface PresenceHostBranding : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11PresenceSDK17PresenceImageInfo")
@interface PresenceImageInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// optional delegate to report status of user login
SWIFT_PROTOCOL("_TtP11PresenceSDK21PresenceLoginDelegate_")
@protocol PresenceLoginDelegate
@optional
/// Method is invoked when the LoginWindow is made visible to the user.
- (void)onLoginWindowDidDisplayWithBackendName:(enum BackendName)backendName;
/// Method is invoked if the user clicks on “forgot password” link.
/// \param backendName Name of the backend this callback event is associated with.
///
- (void)onLoginForgotPasswordClickedWithBackendName:(enum BackendName)backendName;
/// Method is invoked when a login method was used to get an access token.
/// \param backendName Name of the backend this callback event is associated with.
///
/// \param loginMethod Name of methods used to log in.
///
- (void)onLoginMethodUsedWithBackendName:(enum BackendName)backendName loginMethod:(enum LoginMethod)loginMethod;
/// Method is invoked if the user granted app access/logged in.
/// \param backendName Name of the backend this callback event is associated with.
///
- (void)onLoginSuccessfulWithBackendName:(enum BackendName)backendName accessToken:(NSString * _Nonnull)accessToken;
/// Method is invoked if the user dismissed login window via the Cancel button.
- (void)onLoginCancelledWithBackendName:(enum BackendName)backendName;
/// Method is invoked if the backend service fails with an Error
/// \param backendName Name of the backend this callback event is associated with.
///
/// \param error If available, an <code>NSError</code> object is returned. Defaults is <code>nil</code>.
///
- (void)onLoginFailedWithBackendName:(enum BackendName)backendName error:(NSError * _Nonnull)error;
/// Method is invoked whenever Presence SDK refreshes an access token
- (void)onTokenRefreshedWithBackendName:(enum BackendName)backendName accessToken:(NSString * _Nonnull)accessToken;
/// Method is invoked whenever Presence SDK cannot refresh an access token
- (void)onRefreshTokenFailedWithBackendName:(enum BackendName)backendName;
/// Method is invoked when the refresh token has expired, the user will be forced to login again to aquire a new refresh token
/// \param backendName Name of the backend this callback event is associated with.
///
- (void)onRefreshTokenExpiredWithBackendName:(enum BackendName)backendName;
/// Method is invoked when user has successfully logged-out
/// \param backendName Name of the backend this callback event is associated with.
///
- (void)onLogoutSuccessfulWithBackendName:(enum BackendName)backendName;
/// Method is invoked when backend service fails to logout (as part of OAuth2 spec)
/// \param backendName Name of the backend this callback event is associated with.
///
/// \param error Error describing the problem
///
- (void)onLogoutFailedWithBackendName:(enum BackendName)backendName error:(NSError * _Nonnull)error;
/// Method is invoked when user successfully logged-out from all backends
- (void)onLogoutAllSuccessful;
/// Method is invoked when results are returned for a Member info request after login or after updates
/// \param backendName Name of the backend this callback event is associated with.
///
/// \param member Member object.
///
- (void)onMemberUpdatedWithBackendName:(enum BackendName)backendName member:(id <PresenceMember> _Nonnull)member;
/// Method is invoked when all cache is cleared (member info, events, tickets).
- (void)onCacheCleared;
@end


/// Member protocol representing currently logged in user
SWIFT_PROTOCOL("_TtP11PresenceSDK14PresenceMember_")
@protocol PresenceMember
/// The user’s local system Member ID
@property (nonatomic, readonly, copy) NSString * _Nullable localId;
/// The user’s global Member ID
@property (nonatomic, readonly, copy) NSString * _Nullable globalId;
/// The user’s first name
@property (nonatomic, readonly, copy) NSString * _Nonnull firstName;
/// The user’s last name
@property (nonatomic, readonly, copy) NSString * _Nonnull lastName;
/// The user’s email address
@property (nonatomic, readonly, copy) NSString * _Nonnull email;
/// The user’s ZIP/Postal Code
@property (nonatomic, readonly, copy) NSString * _Nonnull postalCode;
/// The user’s preffered language
@property (nonatomic, readonly, copy) NSString * _Nonnull language;
/// The user’s market
@property (nonatomic, readonly, copy) NSString * _Nonnull market;
/// The user’s country
@property (nonatomic, readonly, strong) id <PresenceCountry> _Nullable country;
/// The user’s hmac id
@property (nonatomic, readonly, copy) NSString * _Nonnull hmacId;
/// CCPA doNotSell flag
@property (nonatomic, readonly) BOOL doNotSellFlag;
/// The user’s MFA/2FA phone
@property (nonatomic, readonly, copy) NSString * _Nonnull phone;
/// JWT id token
@property (nonatomic, readonly, copy) NSString * _Nonnull idToken;
@end

@class UIImageView;
@class MKMapView;
@class UILabel;
@class NSCoder;

/// quickly build a PresenceModule Header UIView
/// example usage:
/// <code>// build module header</code>
/// <code>let headerView = PresenceModuleHeaderView.build()</code>
/// <code>headerView.configure(...)</code>
/// <code>let header = PSDKTicketsModule.HeaderDisplay(view: headerView)</code>
/// <code>// build module actions</code>
/// <code>let action1 = PSDKTicketsModule.ActionButton(title: "Action1")</code>
/// <code>let action2 = PSDKTicketsModule.ActionButton(title: "Action2")</code>
/// <code>// build module</code>
/// <code>let module = PSDKTicketsModule(identifier: "com.my.DemoModule", headerDisplay: header, actionButtons: [action1, action2])</code>
SWIFT_CLASS("_TtC11PresenceSDK24PresenceModuleHeaderView")
@interface PresenceModuleHeaderView : UIView
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified colorView;
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified imageView;
@property (nonatomic, weak) IBOutlet MKMapView * _Null_unspecified mapView;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified topLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified centerLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified bottomLabel;
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified barcodeBackgroundView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end






/// this class provides an working implementation of <code>TicketmasterOAuthDelegate</code>
SWIFT_CLASS("_TtC11PresenceSDK21PresenceOAuthProvider")
@interface PresenceOAuthProvider : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// a specific order for an Event
SWIFT_CLASS("_TtC11PresenceSDK13PresenceOrder")
@interface PresenceOrder : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// optional delegate to report order status or handle event / artist / venue related actions
SWIFT_PROTOCOL("_TtP11PresenceSDK21PresenceOrderDelegate_")
@protocol PresenceOrderDelegate
@optional
/// Method is invoked if the client app needs to display an artist detail page
/// \param artistId Identidier of the artist to be launched in ADP.
///
- (void)presentArtistDetailsPageWith:(NSString * _Nonnull)artistId;
/// Method is invoked if the client app needs to display an event detail page
/// \param eventId Identidier of the event to be launched in EDP.
///
- (void)presentEventDetailsPageWith:(NSString * _Nonnull)eventId;
/// Method is invoked if the client app needs to display a venue detail page
/// \param venueId Identidier of the venue to be launched inVADP.
///
- (void)presentVenueDetailsPageWith:(NSString * _Nonnull)venueId;
/// Method is invoked if the client app needs to display some specific page
/// \param deeplink Identifier of the client app native page to be launched.
///
- (void)presentClientAppPageWith:(NSString * _Nonnull)deeplink;
/// Method is invoked when the list of event change for a particular event ID
/// \param eventOrdersArray array of current Events being viewed, will NOT contain Order or Ticket data
///
- (void)didUpdateEventsWithEventOrdersArray:(NSArray<PresenceEventOrders *> * _Nonnull)eventOrdersArray;
/// Method is invoked when the list of tickets change for a particular event ID
/// \param eventOrders current Event and purchased Orders being viewed, contains Order and Ticket data
///
- (void)didUpdateTicketsWithEventOrders:(PresenceEventOrders * _Nonnull)eventOrders;
/// Method is invoked when the list of events changes
- (void)didUpdateOrderedEvents SWIFT_DEPRECATED_MSG("Renamed didUpdateEvents(eventOrdersArray: [PresenceEventOrders])");
/// Method is invoked when the list of tickets change for a particular event ID
/// \param eventId Identifier of the event with ticket updates.
///
- (void)didUpdateTicketsWithEventId:(NSString * _Nonnull)eventId SWIFT_DEPRECATED_MSG("Renamed didUpdateTickets(eventOrders: PresenceEventOrders)");
/// Method is invoked if the client app needs to handle the bar button action
/// \param page PSDK page where button was pressed
///
/// \param screenTitleName title of screen where button was pressed
///
/// \param eventOrders current Event and purchased Orders being viewed (if any)
///
- (void)handleBarButtonActionWithPage:(enum PresencePage)page screenTitleName:(NSString * _Nullable)screenTitleName eventOrders:(PresenceEventOrders * _Nullable)eventOrders;
- (void)handleBarButtonActionWithPage:(enum PresencePage)page buttonTitle:(NSString * _Nonnull)buttonTitle eventOrders:(PresenceEventOrders * _Nullable)eventOrders SWIFT_DEPRECATED_MSG("Renamed handleBarButtonAction(page:screenTitleName:eventOrders:)");
/// Method is invoked when the list of events is presented
- (void)didPresentEventList;
/// Method is invoked when the list of tickets for a particular event ID is presented
- (void)didPresentTicketList;
@end


SWIFT_CLASS("_TtC11PresenceSDK17PresenceOrderInfo")
@interface PresenceOrderInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11PresenceSDK24PresencePromoterBranding")
@interface PresencePromoterBranding : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class UIWindow;

/// Main UIView class for embedding and displaying user tickets from PresenceSDK. Your UIView that is going to display PresenceSDK should be
/// an instance of this class.
IB_DESIGNABLE
SWIFT_CLASS("_TtC11PresenceSDK12PresenceView")
@interface PresenceView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)rect OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
- (void)willMoveToWindow:(UIWindow * _Nullable)newWindow;
- (void)didMoveToWindow;
- (void)refreshView;
@end


IB_DESIGNABLE
SWIFT_CLASS("_TtC11PresenceSDK15PresenceSDKView") SWIFT_DEPRECATED_MSG("Renamed to PresenceView")
@interface PresenceSDKView : PresenceView
- (nonnull instancetype)initWithFrame:(CGRect)rect OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// This public struct represents a ticket.
SWIFT_CLASS("_TtC11PresenceSDK14PresenceTicket")
@interface PresenceTicket : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11PresenceSDK17PresenceTicketFee")
@interface PresenceTicketFee : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11PresenceSDK24PresenceTicketManagement")
@interface PresenceTicketManagement : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11PresenceSDK13PresenceVenue")
@interface PresenceVenue : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@class NSBundle;

/// The PresenceViewController wraps the PresenceView (a UIView) in a UIViewController for ease of use.
/// The PresenceView is used to show the user’s purchased Events and Tickets, but it is not required for login functionality.
SWIFT_CLASS("_TtC11PresenceSDK22PresenceViewController")
@interface PresenceViewController : UIViewController
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end









































@class ASWebAuthenticationSession;

@interface UIViewController (SWIFT_EXTENSION(PresenceSDK)) <ASWebAuthenticationPresentationContextProviding>
- (ASPresentationAnchor _Nonnull)presentationAnchorForWebAuthenticationSession:(ASWebAuthenticationSession * _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
@end








#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef PRESENCESDK_SWIFT_H
#define PRESENCESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AuthenticationServices;
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PresenceSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)















/// Main class for the SDK.
/// <h2>Accessing the PresenceSDK</h2>
/// All public methods are accessible by calling the PresenceSDK class singleton:
/// \code
/// PSDK.shared
///
/// \endcode<h2>Configuring the PresenceSDK</h2>
/// The PresenceSDK requires an API key (consumer key) to function. Configure the PresenceSDK before calling any other methods on it:
/// \code
/// PSDK.shared.setConfig(consumerKey: "<yourConsumerKey>")
///
/// \endcode<h2>Setting Branding and Theme color</h2>
/// The branding color can be simply set by passing the preferred color as an argument when calling:
/// \code
/// let colors = PSDK.BrandingColors(oneColor: UIColor.red)
/// PSDK.shared.setBrandingColors(colors)
///
/// \endcodeWhen setting a light branding color like white, it can problematic for the user to see vital UI elements such as Navigation Bar Buttons, Button Titles, and Section:Row:Seat information. Setting the theme color to dark is recommended when a light branding color is defined.
/// \code
/// PSDK.shared.setTheme(theme: PSDK.SDKTheme.Dark)
///
/// \endcodeMethod to override normal branding colors with Ticketmaster blue on certain buttons (Login, Transfer, Sell, Orders, Modules)
/// \code
/// PSDK.shared.enableTMBrandingColorOverride()
///
/// \endcodeMethod to let PSDK know it shouldn’t brand navigation bar on start. Needs to get called before PSDK.shared.setConfiguration(:)
/// \code
/// PSDK.shared.doNotBrandNavBar()
///
/// \endcode<h2>Viewing Orders and Tickets</h2>
/// Present the <code>PresenceView</code> somewhere in your UI, then start the PresenceSDK can be done by calling:
/// \code
/// var presenceView = PresenceView()
/// PSDK.shared.start(presenceView: presenceView)
///
/// \endcodeYou can directly open a known Event or Order by calling:
/// \code
/// PSDK.shared.jumpToOrderOrEvent(id: "<knownOrderOrEventID>")
///
/// \endcode<h2>Manual Login / Logout</h2>
/// Presence SDK automatically presents login UI when trying to view Orders or Tickets. However, login may be presented manually by calling:
/// \code
/// PSDK.shared.login(to: .AccountManager)
///
/// \endcodeLogin state may fetched at any time:
/// \code
/// let userLoggedIn = PSDK.shared.isLoggedIn()
///
/// \endcodeLogout may also be forced manually:
/// \code
/// PSDK.shared.logout()
///
/// \endcode<h2>Get User Info</h2>
/// Once logged in, user information may be fetched from PresenceSDK by calling:
/// \code
/// PSDK.shared.getMemberInfo(backendName: .AccountManager,
///                           completion { (member: PresenceMember?, error: Error?) })
///
/// \endcode<h2>Get OAuth Token</h2>
/// If your app communicates with other Ticketmaster SDKs or services, you may want the user’s OAuth token:
/// \code
/// PSDK.shared.getAccessToken(backendName: .AccountManager,
///                            presentLoginUI: true,
///                            success: { (accessToken: String) },
///                            failure: { (error: Error?, canceled: Bool) })
///
/// \endcodeNote that by setting <code>presentLoginUI</code> to <code>false</code>, you can try and fetch an access token without triggering the login UI popup.
/// Access tokens that are expired (or about to expire) will be automatically refreshed if possible.
/// <h2>Be Informed</h2>
/// If your app wants to know about operations inside the Presence SDK, your class can optionally conform to the <code>PresenceLoginDelegate</code> or <code>PresenceOrderDelegate</code>:
/// \code
/// PSDK.shared.loginDelegate = self
/// PSDK.shared.orderDelegate = self
///
/// \endcode<h2>Event-Specific Action Button</h2>
/// You can display an action button (such as “Help”) on the navigation bar inside the “My Tickets” view:
/// \code
/// PSDK.shared.setTicketsActionButtonText(title: "Help")
/// PSDK.shared.orderDelegate = self
///
/// \endcodeBy conforming to the <code>PresenceOrderDelegate.handleBarButtonAction</code> you will be informed if the user pressed the action button, in which screen it was pressed and which Event/Order they pressed it on.
/// <h2>Venue Concessions</h2>
/// If your app implements venue concessions, you present an upsell module right inside the “My Tickets” view by conforming to the <code>PresenceVenueDelegate</code>:
/// \code
/// PSDK.shared.venueDelegate = self
///
/// \endcode<h2>More Info</h2>
/// For more information, please visit our <a href="https://developer.ticketmaster.com/products-and-docs/sdks/presence-sdk/">Devportal for Presence SDK</a>.
/// You can also find a demo integration project to quickly learn how to integrate the Presence SDK <a href="https://developer.ticketmaster.com/products-and-docs/sdks/presence-sdk/iOS/index.html">Demo Integration Project</a>.
SWIFT_CLASS("_TtC11PresenceSDK4PSDK")
@interface PSDK : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;

@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
/// present an Action Button in the top-right Navbar on the Tickets page
/// When the button is pressed, <code>orderDelegate.handleBarButtonAction(page:screenTitleName:eventOrders:)</code> will be called.
/// Along with some basic info about the Page, Event, and Order the user is viewing on the Tickets page.
/// \param title title of Action Button, <code>nil</code> = no button (default)
///
- (void)setTicketsActionButtonTextWithTitle:(NSString * _Nullable)title;
@end


@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
@end

enum HostEnvironment : NSInteger;
enum SDKEnvironment : NSInteger;

SWIFT_CLASS("_TtCC11PresenceSDK4PSDK13Configuration")
@interface Configuration : NSObject
- (nonnull instancetype)initWithConsumerKey:(NSString * _Nonnull)consumerKey hostEnvironment:(enum HostEnvironment)hostEnvironment sdkEnvironment:(enum SDKEnvironment)sdkEnvironment displayName:(NSString * _Nullable)displayName useNewAccountsManager:(BOOL)useNewAccountsManager disableModernAccounts:(BOOL)disableModernAccounts quickLogin:(BOOL)quickLogin autoLogin:(BOOL)autoLogin OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





@class UIViewController;
@class NSError;

@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
/// Method to get the logged in user’s information.
/// \param controller UIViewController to present MFA webviews on top of.
///
/// \param additionalProperties Required MFA configuration settings
///
/// \param success Completion block to be called containing MFA token.
///
/// \param token MFA token
///
/// \param failure Completion block to be called containing error information.
///
/// \param error MFA error
///
- (void)startMFAValidationOn:(UIViewController * _Nonnull)controller additionalProperties:(NSDictionary<NSString *, id> * _Nonnull)additionalProperties success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end


enum BackendName : NSInteger;

@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
/// Method to login via Webview Login
/// You can receive updates for the login process by confirming to PresenceLoginDelegate protocol
/// \param backendName <code>Host</code>, <code>AccountManager</code> or <code>SportXR</code>
///
/// \param completion success: Bool, login was completed successfully
///
- (void)loginTo:(enum BackendName)backendName completion:(void (^ _Nullable)(BOOL))completion;
@end


@protocol PresenceMember;

@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
/// Method to get the logged in user’s information.
/// \param backendName The specified backend name where the SDK will retrive member information from.
///
/// \param completion 
///
/// \param member An optional PresenceMember object returned in the completion block callback.
///
/// \param error If PresenceSDK failed to retrive member information, an error will returned in the completion block callback.
///
- (void)getMemberInfoWithBackendName:(enum BackendName)backendName completion:(void (^ _Nonnull)(id <PresenceMember> _Nullable, NSError * _Nullable))completion;
@end

@class PresenceSDKView;
@protocol PresenceLoginDelegate;
@protocol PresenceOrderDelegate;

@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
- (void)startWithPresenceSDKView:(PresenceSDKView * _Nullable)presenceSDKView loginDelegate:(id <PresenceLoginDelegate> _Nullable)loginDelegate orderDelegate:(id <PresenceOrderDelegate> _Nullable)orderDelegate SWIFT_DEPRECATED_MSG("Renamed to start(presenceView: PresenceView, ...)");
@end


@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
/// Method for getting a valid OAUTH Access Token. Note that this will present login UI if the user is not logged in.
/// \param backendName Token for Host, AccountManager, or SportXR
///
/// \param success This block will be called when a valid token is fetched successfully, the success block will provide a valid access token.
///
/// \param failure This block will be called when there is some error fetching the token, the failure block will provide an error object.
///
- (void)getAccessTokenWithBackendName:(enum BackendName)backendName success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nullable, BOOL))failure;
/// Method for getting a valid OAUTH Access Token.
/// \param backendName Token for Host, AccountManager, or SportXR
///
/// \param presentLoginUI upon failure (not logged in or refresh token expired), automatically present login UI to user
///
/// \param success This block will be called when a valid token is fetched successfully, the success block will provide a valid access token.
///
/// \param failure This block will be called when there is some error fetching the token, the failure block will provide an error object.
///
- (void)getAccessTokenWithBackendName:(enum BackendName)backendName presentLoginUI:(BOOL)presentLoginUI success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nullable, BOOL))failure;
@end

enum LoginButtons : NSInteger;

@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
/// Method to reser password for a Host Account
/// \param success This block will be called when a valid token is fetched successfully, the success block will provide a valid access token.
///
/// \param failure This block will be called when there is some error fetching the token, the failure block will provide an error object.
///
/// \param token Password reset token (if any), used to quickly identify which account is being reset
///
- (void)resetPasswordForHostWithSuccess:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nullable, BOOL))failure token:(NSString * _Nullable)token;
/// Property to choose an available action button for Team account on the Login Screen.
/// Default value is LoginButtons.forgotPassword
@property (nonatomic) enum LoginButtons loginButton;
@end




enum IdType : NSInteger;
enum ActionType : NSInteger;

@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
/// Display modally a View Controller with order/event information for the given identifier.
/// Shows events if the particular order is not found.
- (void)jumpToOrderOrEventWithId:(NSString * _Nonnull)id;
/// Display modally a View Controller with order/event information for the given identifier.
/// Shows events if the particular order/event is not found.
- (void)jumpToOrderOrEventWithId:(NSString * _Nonnull)id type:(enum IdType)type;
/// Display modally a View Controller with order/event information for the given identifier and perform the action
/// Shows events if the particular order/event is not found.
- (void)jumpToOrderOrEventWithId:(NSString * _Nonnull)id type:(enum IdType)type action:(enum ActionType)action;
/// Display modally a View Controller with order/event information for the given identifier and perform the action
/// Shows events if the particular order/event is not found.
- (void)jumpToOrderOrEventWithId:(NSString * _Nonnull)id type:(enum IdType)type action:(enum ActionType)action orderDelegate:(id <PresenceOrderDelegate> _Nullable)orderDelegate SWIFT_DEPRECATED_MSG("Use jumpToOrderOrEvent(id:type:action:) and set orderDelegate directly on PSDK.shared");
@end


@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
/// Method to log out user from all the logged-in accounts (w/o parameters for objc compatibility)
- (void)logOut SWIFT_DEPRECATED_MSG("Use logout(completion:) instead for proper OAuth2 logout handling");
/// Method to log out user from all the logged-in accounts
/// \param forceLogout true = logout locally, regardless of response from server
///
/// \param completion 
///
/// \param hostSuccess Bool, user logged out of Host
///
/// \param hostError Error, error logging out of Host
///
/// \param teamSuccess Bool, user logged out of AccountManager
///
/// \param teamError Error, error logging out of AccountManager
///
/// \param sportXRSuccess Bool, user logged out of SportXR
///
/// \param sportXRError Error, error logging out of SportXR
///
- (void)logOutWithForceLogout:(BOOL)forceLogout completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable, BOOL, NSError * _Nullable, BOOL, NSError * _Nullable))completion;
/// Method to log out user from specific logged-in accounts
/// \param backendName logout on Host, AccountManager, or SportXR
///
/// \param forceLogout true = logout locally, regardless of response from server
///
/// \param success This block will be called when logout was completed successfully.
///
/// \param failure This block will be called when there is some error logging out.
/// <ul>
///   <li>
///     error: Logout error
///   </li>
/// </ul>
///
- (void)logoutWithBackendName:(enum BackendName)backendName forceLogout:(BOOL)forceLogout success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Method to log out user from Ticketmaster account
/// \param forceLogout true = logout locally, regardless of response from server
///
/// \param success This block will be called when logout was completed successfully.
///
/// \param failure This block will be called when there is some error logging out.
///
/// \param error Logout error
///
- (void)logOutHostWithForceLogout:(BOOL)forceLogout success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Method to log out user from Team account
/// \param forceLogout true = logout locally, regardless of response from server
///
/// \param success This block will be called when logout was completed successfully.
///
/// \param failure This block will be called when there is some error logging out.
///
/// \param error Logout error
///
- (void)logOutTeamWithForceLogout:(BOOL)forceLogout success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Method to log out user from SportXR account
/// \param forceLogout true = logout locally, regardless of response from server
///
/// \param success This block will be called when logout was completed successfully.
///
/// \param failure This block will be called when there is some error logging out.
///
/// \param error Logout error
///
- (void)logOutSportXRWithForceLogout:(BOOL)forceLogout success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end



@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
/// Method to check if user is logged into any backend services, and has a valid (un-expired) access token available.
///
/// returns:
/// True if user is logged in any backend services and has valid access token available, otherwise returns false.
- (BOOL)isLoggedIn SWIFT_WARN_UNUSED_RESULT;
/// Method to check if user is logged into <code>Host</code> backend service, and has a valid (un-expired) access token available.
///
/// returns:
/// True if user is logged into <code>Host</code> and has a valid access token available, otherwise returns false.
- (BOOL)isLoggedIntoHost SWIFT_WARN_UNUSED_RESULT;
/// Method to check if user is logged into Team <code>AccountsManager</code> backend service, and has a valid (un-expired) access token available.
///
/// returns:
/// True if user is logged into Team <code>AccountsManager</code> and has a valid access token available, otherwise returns false.
- (BOOL)isLoggedIntoTeam SWIFT_WARN_UNUSED_RESULT;
/// Method to check if user is logged into <code>SportXR</code> backend service, and has a valid (un-expired) access token available.
///
/// returns:
/// True if user is logged into <code>SportXR</code> and has a valid access token available, otherwise returns false.
- (BOOL)isLoggedIntoSportXR SWIFT_WARN_UNUSED_RESULT;
/// Method to check if user has signed into any backend services, but may or may not have a valid (un-expired) access token.
///
/// returns:
/// True if user is signed into any backend services, but may or may not have a valid access token, otherwise returns false.
- (BOOL)hasUserSignedIn SWIFT_WARN_UNUSED_RESULT;
/// Method to check if user is signed into <code>Host</code> backend service, but may or may not have a valid (un-expired) access token.
///
/// returns:
/// True if user is signed into <code>Host</code>, but may or may not have a valid access token, otherwise returns false.
- (BOOL)hasUserSignedInHost SWIFT_WARN_UNUSED_RESULT;
/// Method to check if user is signed into Team <code>AccountsManager</code> backend service, but may or may not have a valid (un-expired) access token.
///
/// returns:
/// True if user is signed into Team <code>AccountsManager</code>, but may or may not have a valid access token, otherwise returns false.
- (BOOL)hasUserSignedInTeam SWIFT_WARN_UNUSED_RESULT;
/// Method to check if user is signed into <code>SportXR</code> backend service, but may or may not have a valid (un-expired) access token.
///
/// returns:
/// True if user is signed into <code>SportXR</code>, but may or may not have a valid access token, otherwise returns false.
- (BOOL)hasUserSignedInSportXR SWIFT_WARN_UNUSED_RESULT;
@end


@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
@end

/// Name of the backend in which an action was perform
typedef SWIFT_ENUM(NSInteger, BackendName, open) {
/// US or UK Ticketmaster Host
  BackendNameHost = 0,
/// Team Archtics Account Manager
  BackendNameAccountManager = 1,
/// Team Sport XR
  BackendNameSportXR = 2,
};

/// Name of methods used to log in
typedef SWIFT_ENUM(NSInteger, LoginMethod, open) {
/// Get access token by username and password
  LoginMethodConventional = 0,
/// Get access token automatically by using refresh token
  LoginMethodAutomatic = 1,
/// Get access token by finger print
  LoginMethodFingerprint = 2,
};

/// Account and Ticket source environments (backend servers)
typedef SWIFT_ENUM(NSInteger, HostEnvironment, open) {
/// US (North American) Host
  HostEnvironmentUS = 0,
/// UK Host
  HostEnvironmentUK = 1,
};

/// Production and other build environments (backend servers)
typedef SWIFT_ENUM(NSInteger, SDKEnvironment, open) {
/// Production
  SDKEnvironmentProduction = 0,
/// Staging
  SDKEnvironmentStaging = 1,
/// Pre Production
  SDKEnvironmentPreProduction = 2,
/// Development
  SDKEnvironmentDevelopment = 3,
};

/// Switches between app themes
/// <ul>
///   <li>
///     Light: Important UI elements will be colored white.
///   </li>
///   <li>
///     Dark: Important UI elements will be colored black.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SDKTheme, open) {
/// Important UI elements will be colored white.
  SDKThemeLight = 0,
/// Important UI elements will be colored black.
  SDKThemeDark = 1,
};

typedef SWIFT_ENUM(NSInteger, VenueConcessionsButtonType, open) {
  VenueConcessionsButtonTypeOrder = 0,
  VenueConcessionsButtonTypeWallet = 1,
};

typedef SWIFT_ENUM(NSInteger, IdType, open) {
/// Search for event with the given identifier
  IdTypeEvent = 0,
/// Search for order with the given identifier
  IdTypeOrder = 1,
/// Search for event or order with the given identifier
  IdTypeAny = 2,
};

typedef SWIFT_ENUM(NSInteger, ActionType, open) {
/// automatically show posting flow
  ActionTypePosting = 0,
/// automatically show transfer flow
  ActionTypeTransfer = 1,
};

typedef SWIFT_ENUM(NSInteger, LoginButtons, open) {
  LoginButtonsForgotPassword = 0,
  LoginButtonsCreateAccount = 1,
};

typedef SWIFT_ENUM(NSInteger, PresencePage, open) {
  PresencePageNone = 0,
  PresencePageMyEvents = 1,
  PresencePageMyTickets = 2,
  PresencePageMyTicketDetail = 3,
  PresencePageModule = 4,
  PresencePageViewBarcode = 5,
};

@class UIColor;

/// Pass to <code>PSDK.shared.setBrandingColors</code> to customize the color of UI elements by overridding their respective properties.
SWIFT_CLASS("_TtCC11PresenceSDK4PSDK14BrandingColors")
@interface BrandingColors : NSObject
- (nonnull instancetype)initWithNavBarColor:(UIColor * _Nonnull)navBarColor ticketColor:(UIColor * _Nonnull)ticketColor buttonColor:(UIColor * _Nonnull)buttonColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOneColor:(UIColor * _Nonnull)oneColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// theme visual style of Identity page
typedef SWIFT_ENUM(NSInteger, IdentityTheme, open) {
  IdentityThemeTicketmaster = 0,
  IdentityThemeTicketmasterNew = 1,
  IdentityThemeLivenation = 2,
};


@class UIImage;

@interface PSDK (SWIFT_EXTENSION(PresenceSDK))
/// Method for configuring PresenceSDK.
/// \param consumerKey The Consumer Key associated with your App on developer.ticketmaster.com
///
/// \param hostEnvironment Account and Ticket source backend server stack, default = .US
///
/// \param sdkEnvironment Production or other test build environments, default = .Production
///
/// \param displayName Team/App name that will be displayed on the login page in the SDK
///
/// \param useNewAccountsManager Use new Team AccountsManager: true (am.ticketmaster.com), false (oss.ticketmaster.com), default = true
///
/// \param disableModernAccounts Manually disable ModernAccounts login, default = false
///
/// \param quickLogin Use the new, quick login screen (ModernAccounts only), default = true
///
/// \param autoLogin Automatically present login prompt (quickLogin only, ModernAccounts only), default = true
///
- (void)setConfigWithConsumerKey:(NSString * _Nonnull)consumerKey hostEnvironment:(enum HostEnvironment)hostEnvironment sdkEnvironment:(enum SDKEnvironment)sdkEnvironment displayName:(NSString * _Nullable)displayName useNewAccountsManager:(BOOL)useNewAccountsManager disableModernAccounts:(BOOL)disableModernAccounts quickLogin:(BOOL)quickLogin autoLogin:(BOOL)autoLogin;
/// Method for configuring PresenceSDK.
/// \param configuration PSDK.Configuration object containing various integrator-customizable settings
///
- (void)setConfiguration:(Configuration * _Nonnull)configuration;
/// Method for checking configuration of PresenceSDK for Teams
/// \param success Called if configuration was readed from cache or returned from Apigee, main queue. The <code>start(presenceView:)</code> method should be called in this success block.
///
/// \param failure Called if configuration failed (e.g. no Internet on first launch), Should be taken into account during SDK integration.
///
- (void)checkConfigWithSuccess:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// Method for configuring Team Apps branding colors in PresenceSDK. These branding colors will be used
/// on various UI elements of the SDK to provide a custom look for Team apps.
/// \param brandingColors Customize colors by overriding properties of the <code>BrandingColors</code> class.
///
- (void)setBrandingColors:(BrandingColors * _Nonnull)brandingColors;
/// Method to override normal branding colors with Ticketmaster blue on certain buttons (Login, Transfer, Sell, Orders, Modules)
- (void)enableTMBrandingColorOverride;
/// Method to let PSDK know it shouldn’t brand navigation bar on start. Needs to get called before PSDK.shared.setConfiguration(:)
- (void)doNotBrandNavBar;
/// Method for configuring Team Apps logo in PresenceSDK.
/// \param image Image to be used in the SDK as logo.
///
- (void)setLogo:(UIImage * _Nullable)image;
/// Method for configuring Team Apps theme color in PresenceSDK. This theme color will be used
/// on various UI elements of the SDK to provide a custom look for Team apps.
/// \param theme Theme to be used in the SDK.
///
- (void)setThemeWithTheme:(enum SDKTheme)theme;
/// Method to enable or disable User Tracking in PresenceSDK.
/// Default: enabled (controlled by PresenceMember.doNotSell flag)
- (void)setUserTrackingWithEnabled:(BOOL)enabled;
@end



/// quickly build a PresenceModule Header UIView
/// <ul>
///   <li>
///     Example Usage:
///   </li>
/// </ul>
/// <code>let headerView = PresenceModuleHeaderView.build()</code>
/// <code>headerView.configure(...)</code>
/// <code>let header = PSDKTicketsModule.HeaderDisplay(view: headerView)</code>
/// <code>let action1 = PSDKTicketsModule.ActionButton(title: "Action1")</code>
/// <code>let action2 = PSDKTicketsModule.ActionButton(title: "Action2")</code>
/// <code>let module = PSDKTicketsModule(identifier: "com.myApp.myModule", headerDisplay: header, actionButtons: [action1, action2])</code>
SWIFT_CLASS("_TtC11PresenceSDK17PSDKTicketsModule")
@interface PSDKTicketsModule : NSObject
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








SWIFT_CLASS("_TtC11PresenceSDK18PresenceAttraction")
@interface PresenceAttraction : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// a UIColor Codable
SWIFT_CLASS("_TtC11PresenceSDK13PresenceColor")
@interface PresenceColor : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Country protocol representing country of currently logged in user
SWIFT_PROTOCOL("_TtP11PresenceSDK15PresenceCountry_")
@protocol PresenceCountry
/// Host country id, -1 for Account Manager
@property (nonatomic, readonly) NSInteger id;
/// Host country standard, nil for Account Manager
@property (nonatomic, readonly, copy) NSString * _Nullable standard;
/// AccountManager country code, nil for Host
@property (nonatomic, readonly, copy) NSString * _Nullable code;
/// AccountManager country name, nil for Host
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@end


SWIFT_CLASS("_TtC11PresenceSDK16PresenceDateInfo")
@interface PresenceDateInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11PresenceSDK16PresenceDelivery")
@interface PresenceDelivery : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// an Event purchased by the user
SWIFT_CLASS("_TtC11PresenceSDK13PresenceEvent")
@interface PresenceEvent : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Presence SDK Analytics class for tracking user activity
SWIFT_CLASS("_TtC11PresenceSDK22PresenceEventAnalytics")
@interface PresenceEventAnalytics : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// a list of Orders user has purchased for a particular Event
SWIFT_CLASS("_TtC11PresenceSDK19PresenceEventOrders")
@interface PresenceEventOrders : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







SWIFT_CLASS("_TtC11PresenceSDK19PresenceHealthCheck")
@interface PresenceHealthCheck : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11PresenceSDK20PresenceHostBranding")
@interface PresenceHostBranding : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11PresenceSDK17PresenceImageInfo")
@interface PresenceImageInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// optional delegate to report status of user login
SWIFT_PROTOCOL("_TtP11PresenceSDK21PresenceLoginDelegate_")
@protocol PresenceLoginDelegate
@optional
/// Method is invoked when the LoginWindow is made visible to the user.
- (void)onLoginWindowDidDisplayWithBackendName:(enum BackendName)backendName;
/// Method is invoked if the user clicks on “forgot password” link.
/// \param backendName Name of the backend this callback event is associated with.
///
- (void)onLoginForgotPasswordClickedWithBackendName:(enum BackendName)backendName;
/// Method is invoked when a login method was used to get an access token.
/// \param backendName Name of the backend this callback event is associated with.
///
/// \param loginMethod Name of methods used to log in.
///
- (void)onLoginMethodUsedWithBackendName:(enum BackendName)backendName loginMethod:(enum LoginMethod)loginMethod;
/// Method is invoked if the user granted app access/logged in.
/// \param backendName Name of the backend this callback event is associated with.
///
- (void)onLoginSuccessfulWithBackendName:(enum BackendName)backendName accessToken:(NSString * _Nonnull)accessToken;
/// Method is invoked if the user dismissed login window via the Cancel button.
- (void)onLoginCancelledWithBackendName:(enum BackendName)backendName;
/// Method is invoked if the backend service fails with an Error
/// \param backendName Name of the backend this callback event is associated with.
///
/// \param error If available, an <code>NSError</code> object is returned. Defaults is <code>nil</code>.
///
- (void)onLoginFailedWithBackendName:(enum BackendName)backendName error:(NSError * _Nonnull)error;
/// Method is invoked whenever Presence SDK refreshes an access token
- (void)onTokenRefreshedWithBackendName:(enum BackendName)backendName accessToken:(NSString * _Nonnull)accessToken;
/// Method is invoked whenever Presence SDK cannot refresh an access token
- (void)onRefreshTokenFailedWithBackendName:(enum BackendName)backendName;
/// Method is invoked when the refresh token has expired, the user will be forced to login again to aquire a new refresh token
/// \param backendName Name of the backend this callback event is associated with.
///
- (void)onRefreshTokenExpiredWithBackendName:(enum BackendName)backendName;
/// Method is invoked when user has successfully logged-out
/// \param backendName Name of the backend this callback event is associated with.
///
- (void)onLogoutSuccessfulWithBackendName:(enum BackendName)backendName;
/// Method is invoked when backend service fails to logout (as part of OAuth2 spec)
/// \param backendName Name of the backend this callback event is associated with.
///
/// \param error Error describing the problem
///
- (void)onLogoutFailedWithBackendName:(enum BackendName)backendName error:(NSError * _Nonnull)error;
/// Method is invoked when user successfully logged-out from all backends
- (void)onLogoutAllSuccessful;
/// Method is invoked when results are returned for a Member info request after login or after updates
/// \param backendName Name of the backend this callback event is associated with.
///
/// \param member Member object.
///
- (void)onMemberUpdatedWithBackendName:(enum BackendName)backendName member:(id <PresenceMember> _Nonnull)member;
/// Method is invoked when all cache is cleared (member info, events, tickets).
- (void)onCacheCleared;
@end


/// Member protocol representing currently logged in user
SWIFT_PROTOCOL("_TtP11PresenceSDK14PresenceMember_")
@protocol PresenceMember
/// The user’s local system Member ID
@property (nonatomic, readonly, copy) NSString * _Nullable localId;
/// The user’s global Member ID
@property (nonatomic, readonly, copy) NSString * _Nullable globalId;
/// The user’s first name
@property (nonatomic, readonly, copy) NSString * _Nonnull firstName;
/// The user’s last name
@property (nonatomic, readonly, copy) NSString * _Nonnull lastName;
/// The user’s email address
@property (nonatomic, readonly, copy) NSString * _Nonnull email;
/// The user’s ZIP/Postal Code
@property (nonatomic, readonly, copy) NSString * _Nonnull postalCode;
/// The user’s preffered language
@property (nonatomic, readonly, copy) NSString * _Nonnull language;
/// The user’s market
@property (nonatomic, readonly, copy) NSString * _Nonnull market;
/// The user’s country
@property (nonatomic, readonly, strong) id <PresenceCountry> _Nullable country;
/// The user’s hmac id
@property (nonatomic, readonly, copy) NSString * _Nonnull hmacId;
/// CCPA doNotSell flag
@property (nonatomic, readonly) BOOL doNotSellFlag;
/// The user’s MFA/2FA phone
@property (nonatomic, readonly, copy) NSString * _Nonnull phone;
/// JWT id token
@property (nonatomic, readonly, copy) NSString * _Nonnull idToken;
@end

@class UIImageView;
@class MKMapView;
@class UILabel;
@class NSCoder;

/// quickly build a PresenceModule Header UIView
/// example usage:
/// <code>// build module header</code>
/// <code>let headerView = PresenceModuleHeaderView.build()</code>
/// <code>headerView.configure(...)</code>
/// <code>let header = PSDKTicketsModule.HeaderDisplay(view: headerView)</code>
/// <code>// build module actions</code>
/// <code>let action1 = PSDKTicketsModule.ActionButton(title: "Action1")</code>
/// <code>let action2 = PSDKTicketsModule.ActionButton(title: "Action2")</code>
/// <code>// build module</code>
/// <code>let module = PSDKTicketsModule(identifier: "com.my.DemoModule", headerDisplay: header, actionButtons: [action1, action2])</code>
SWIFT_CLASS("_TtC11PresenceSDK24PresenceModuleHeaderView")
@interface PresenceModuleHeaderView : UIView
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified colorView;
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified imageView;
@property (nonatomic, weak) IBOutlet MKMapView * _Null_unspecified mapView;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified topLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified centerLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified bottomLabel;
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified barcodeBackgroundView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end






/// this class provides an working implementation of <code>TicketmasterOAuthDelegate</code>
SWIFT_CLASS("_TtC11PresenceSDK21PresenceOAuthProvider")
@interface PresenceOAuthProvider : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// a specific order for an Event
SWIFT_CLASS("_TtC11PresenceSDK13PresenceOrder")
@interface PresenceOrder : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// optional delegate to report order status or handle event / artist / venue related actions
SWIFT_PROTOCOL("_TtP11PresenceSDK21PresenceOrderDelegate_")
@protocol PresenceOrderDelegate
@optional
/// Method is invoked if the client app needs to display an artist detail page
/// \param artistId Identidier of the artist to be launched in ADP.
///
- (void)presentArtistDetailsPageWith:(NSString * _Nonnull)artistId;
/// Method is invoked if the client app needs to display an event detail page
/// \param eventId Identidier of the event to be launched in EDP.
///
- (void)presentEventDetailsPageWith:(NSString * _Nonnull)eventId;
/// Method is invoked if the client app needs to display a venue detail page
/// \param venueId Identidier of the venue to be launched inVADP.
///
- (void)presentVenueDetailsPageWith:(NSString * _Nonnull)venueId;
/// Method is invoked if the client app needs to display some specific page
/// \param deeplink Identifier of the client app native page to be launched.
///
- (void)presentClientAppPageWith:(NSString * _Nonnull)deeplink;
/// Method is invoked when the list of event change for a particular event ID
/// \param eventOrdersArray array of current Events being viewed, will NOT contain Order or Ticket data
///
- (void)didUpdateEventsWithEventOrdersArray:(NSArray<PresenceEventOrders *> * _Nonnull)eventOrdersArray;
/// Method is invoked when the list of tickets change for a particular event ID
/// \param eventOrders current Event and purchased Orders being viewed, contains Order and Ticket data
///
- (void)didUpdateTicketsWithEventOrders:(PresenceEventOrders * _Nonnull)eventOrders;
/// Method is invoked when the list of events changes
- (void)didUpdateOrderedEvents SWIFT_DEPRECATED_MSG("Renamed didUpdateEvents(eventOrdersArray: [PresenceEventOrders])");
/// Method is invoked when the list of tickets change for a particular event ID
/// \param eventId Identifier of the event with ticket updates.
///
- (void)didUpdateTicketsWithEventId:(NSString * _Nonnull)eventId SWIFT_DEPRECATED_MSG("Renamed didUpdateTickets(eventOrders: PresenceEventOrders)");
/// Method is invoked if the client app needs to handle the bar button action
/// \param page PSDK page where button was pressed
///
/// \param screenTitleName title of screen where button was pressed
///
/// \param eventOrders current Event and purchased Orders being viewed (if any)
///
- (void)handleBarButtonActionWithPage:(enum PresencePage)page screenTitleName:(NSString * _Nullable)screenTitleName eventOrders:(PresenceEventOrders * _Nullable)eventOrders;
- (void)handleBarButtonActionWithPage:(enum PresencePage)page buttonTitle:(NSString * _Nonnull)buttonTitle eventOrders:(PresenceEventOrders * _Nullable)eventOrders SWIFT_DEPRECATED_MSG("Renamed handleBarButtonAction(page:screenTitleName:eventOrders:)");
/// Method is invoked when the list of events is presented
- (void)didPresentEventList;
/// Method is invoked when the list of tickets for a particular event ID is presented
- (void)didPresentTicketList;
@end


SWIFT_CLASS("_TtC11PresenceSDK17PresenceOrderInfo")
@interface PresenceOrderInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11PresenceSDK24PresencePromoterBranding")
@interface PresencePromoterBranding : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class UIWindow;

/// Main UIView class for embedding and displaying user tickets from PresenceSDK. Your UIView that is going to display PresenceSDK should be
/// an instance of this class.
IB_DESIGNABLE
SWIFT_CLASS("_TtC11PresenceSDK12PresenceView")
@interface PresenceView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)rect OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
- (void)willMoveToWindow:(UIWindow * _Nullable)newWindow;
- (void)didMoveToWindow;
- (void)refreshView;
@end


IB_DESIGNABLE
SWIFT_CLASS("_TtC11PresenceSDK15PresenceSDKView") SWIFT_DEPRECATED_MSG("Renamed to PresenceView")
@interface PresenceSDKView : PresenceView
- (nonnull instancetype)initWithFrame:(CGRect)rect OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// This public struct represents a ticket.
SWIFT_CLASS("_TtC11PresenceSDK14PresenceTicket")
@interface PresenceTicket : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11PresenceSDK17PresenceTicketFee")
@interface PresenceTicketFee : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11PresenceSDK24PresenceTicketManagement")
@interface PresenceTicketManagement : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11PresenceSDK13PresenceVenue")
@interface PresenceVenue : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@class NSBundle;

/// The PresenceViewController wraps the PresenceView (a UIView) in a UIViewController for ease of use.
/// The PresenceView is used to show the user’s purchased Events and Tickets, but it is not required for login functionality.
SWIFT_CLASS("_TtC11PresenceSDK22PresenceViewController")
@interface PresenceViewController : UIViewController
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end









































@class ASWebAuthenticationSession;

@interface UIViewController (SWIFT_EXTENSION(PresenceSDK)) <ASWebAuthenticationPresentationContextProviding>
- (ASPresentationAnchor _Nonnull)presentationAnchorForWebAuthenticationSession:(ASWebAuthenticationSession * _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
@end








#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
